WEBVTT

0
00:04.930 --> 00:10.070
Relaciones de datos. Claves primarias y extranjeras.

1
00:10.070 --> 00:12.380
Conceptos básicos de las relaciones de datos.

2
00:12.380 --> 00:18.110
Uno de los principios clave de las bases de datos relacionales es que los datos de una tabla pueden estar de alguna manera relacionados con los datos

3
00:18.150 --> 00:20.210
en otra mesa.

4
00:20.210 --> 00:26.150
Si estuviéramos diseñando una base de datos para un banco y cada cuenta bancaria estaría en una tabla y cada transacción

5
00:26.480 --> 00:34.450
en cada cuenta bancaria estaría en otra mesa y sería de vital importancia que sabíamos que

6
00:34.450 --> 00:37.690
transacción en relación con la cuenta bancaria.

7
00:37.690 --> 00:47.730
Hacemos esto usando relaciones, por ejemplo, aquí la columna de identificación de cuenta bancaria en la tabla de transacciones

8
00:48.720 --> 00:50.650
coincidiría con una identificación.

9
00:51.820 --> 00:53.590
Desde la tabla de cuentas bancarias

10
00:58.160 --> 01:06.380
la integridad de las relaciones que definen explícitamente las relaciones en la base de datos exige la integridad de la relación.

11
01:06.380 --> 01:11.660
Esto significaría que en un ejemplo anterior la base de datos impediría que un usuario eliminara una cuenta bancaria

12
01:11.840 --> 01:14.930
que tenía transacciones asociadas con él.

13
01:15.170 --> 01:20.780
No habría ningún problema en eliminar una cuenta bancaria que no tuviera transacciones ni eliminar ninguna transacción

14
01:22.740 --> 01:29.370
definimos el ID utilizado en la tabla primaria principal como la clave principal y el ID en la tabla secundaria

15
01:29.610 --> 01:30.390
como clave extranjera

16
01:33.830 --> 01:35.520
tipos de relaciones.

17
01:35.660 --> 01:39.560
Tres tipos de relaciones uno a uno.

18
01:39.860 --> 01:45.710
Aquí es donde un registro de una tabla solo coincide con un registro de otra tabla.

19
01:45.800 --> 01:52.640
Por ejemplo, una persona solo tiene un pasaporte.
Uno a muchos.

20
01:52.640 --> 01:58.620
Aquí es donde un registro de una tabla coincide con varios registros de otra tabla.

21
01:58.760 --> 02:09.230
Por ejemplo, una cuenta bancaria tiene muchas transacciones. Muchos a muchos: Muchos registros en una tabla coinciden con muchos

22
02:09.230 --> 02:16.490
registros en otra tabla, por ejemplo, los alumnos pueden asistir a varias clases y las clases tienen varios alumnos.

23
02:19.920 --> 02:21.810
Una relación de uno a uno.

24
02:21.810 --> 02:25.670
Esto es similar a extender una tabla con columnas adicionales.

25
02:25.860 --> 02:32.190
Pero tal vez desee mantener los datos lógicamente separados en nuestro proyecto de biblioteca introducido en el anterior

26
02:32.190 --> 02:40.310
lección que hemos introducido el concepto de una tarjeta de membresía de la biblioteca.

27
02:40.310 --> 02:44.710
A cada estudiante se le permite una sola tarjeta de membresía de la biblioteca.

28
02:46.670 --> 02:56.720
En esta demostración crearemos la tabla de tarjetas de membresía de la biblioteca con columnas denominadas ID, studentID

29
02:57.210 --> 02:59.910
y expiryDate.

30
02:59.990 --> 03:04.790
Debemos definir la identificación como la clave principal en la tabla de estudiantes.

31
03:04.970 --> 03:11.120
Definiremos la identificación del estudiante como la clave externa en la tabla de tarjetas de membresía de la biblioteca para definir la relación

32
03:11.120 --> 03:18.770
entre la identificación y la identificación del estudiante y luego demostraremos la integridad de la relación al intentar

33
03:18.830 --> 03:28.190
añadir varias tarjetas de membresía de la biblioteca o eliminar a un estudiante que tiene una tarjeta de membresía de la biblioteca

34
03:28.310 --> 03:29.210
asociado con él.

35
03:30.410 --> 03:30.800
De acuerdo.

36
03:30.820 --> 03:38.090
Así que aquí queremos demostrar una relación uno a uno con la tarjeta de membresía de la biblioteca donde uno

37
03:38.090 --> 03:41.980
estudiante puede tener una sola tarjeta de membresía de la biblioteca.

38
03:42.890 --> 03:59.820
crear biblioteca de tablasMembershipCard (Id int identity(1,1), 

39
03:59.820 --> 04:03.150
y vamos a definir esto como clave principal

40
04:07.080 --> 04:10.810
a continuación, deberá agregar la identificación del estudiante.

41
04:12.510 --> 04:20.970
Esta será la clave extranjera y voy a definir esto como único para que sólo pueda ser uno

42
04:22.800 --> 04:37.150
fila en esta tabla con la misma identificación de estudiante. Voy a añadir la caducidad como una fecha que indicará cuándo

43
04:37.150 --> 04:38.430
el

44
04:38.530 --> 04:40.110
La tarjeta de membresía de la biblioteca expiraría

45
04:43.610 --> 04:45.750
Yo creé esa mesa.

46
04:45.740 --> 04:51.380
Si seleccionamos de ella. No espero ver ningún dato

47
04:56.800 --> 05:05.170
podemos crear la relación entre el estudiante y la tarjeta de membresía de la biblioteca usando la interfaz de usuario.

48
05:07.120 --> 05:13.650
También puede definirlo a través del código, pero primero usaré la interfaz de usuario a través de este uso la base de datos

49
05:13.650 --> 05:21.500
diagramas > opción > nuevo diagrama de base de datos.

50
05:21.980 --> 05:25.880
Aquí añadiremos .. (vamos a actualizar)

51
05:25.880 --> 05:32.420
Aquí agregaremos los tres libros de mesas, la tarjeta de membresía de la biblioteca y los estudiantes.

52
05:39.420 --> 05:50.370
Y queremos hacer una relación entre la identificación del estudiante y el estudiante para que los estudiantes la identificación en los estudiantes

53
05:50.370 --> 05:57.850
tabla con el ID de alumno y la tabla de tarjeta de membresía de la biblioteca sugieren un nombre para la relación.

54
05:59.280 --> 06:08.390
Bien y esto ahora se crea una relación uno a uno entre la identificación del estudiante y la membresía de la biblioteca

55
06:08.390 --> 06:08.780
Tarjeta.

56
06:10.040 --> 06:11.150
Así que debería salvar esto

57
06:17.020 --> 06:17.920
Ahora.

58
06:18.230 --> 06:25.250
Ahora vamos a demostrar la integridad de esta relación tratando de romperla.

59
06:27.350 --> 06:29.730
Así que primero debemos agregar una fila a la.

60
06:29.810 --> 06:31.730
tabla de tarjetas de membresía de la biblioteca.

61
06:34.310 --> 06:36.070
Así que vamos a seleccionar * de los estudiantes

62
06:40.580 --> 06:44.990
Así que deberíamos darle una tarjeta de membresía de la biblioteca a Peter Murphy I.D. 3

63
06:51.750 --> 06:56.130
tenga en cuenta que no es necesario insertar en la columna ideo porque se generará automáticamente.

64
06:56.160 --> 06:58.290
De hecho, no deberías.

65
06:58.320 --> 06:59.790
La base de datos no le permitirá

66
07:04.330 --> 07:08.280
el estudiante id 3 que es Peter Murphy.

67
07:08.960 --> 07:12.860
Caducidad en 2025-01-01

68
07:37.580 --> 07:39.590
aquí tenemos un

69
07:42.810 --> 07:47.610
tarjeta de membresía de la biblioteca configurada para el identificador del estudiante 3

70
07:47.690 --> 07:51.580
Ahora veamos qué pasa cuando intentamos eliminar la identificación de los estudiantes.

71
07:51.590 --> 07:51.900
Tres

72
08:00.210 --> 08:11.080
aquí tenemos un error diciendo que la clave extranjera nos ha impedido eliminar el identificador de estudiante 3 porque

73
08:11.170 --> 08:13.380
hay una fila.

74
08:13.450 --> 08:17.210
Hay una fila en la tabla de tarjetas de membresía de la biblioteca.

75
08:17.750 --> 08:24.520
Y es la relación de uno a uno por lo que significa que no podemos agregar una segunda tarjeta de membresía de la biblioteca para

76
08:24.520 --> 08:25.240
el mismo estudiante

77
08:29.580 --> 08:34.350
no se nos permite hacer eso debido a este especificador único

78
08:37.280 --> 08:43.720
por lo que esta es la forma de definir la relación mediante la interfaz de usuario.

79
08:43.740 --> 08:46.690
Ahora veamos si podemos hacer lo mismo usando código.

80
08:46.710 --> 08:50.280
Así que debería volver al diagrama para eliminar la relación

81
08:56.830 --> 09:03.870
y ahora voy a crear una relación de nuevo, pero esta vez usando código

82
09:15.320 --> 09:21.200
por lo que el comando es 

83
09:28.950 --> 09:29.960
alterar la tabla librarymembershipcard add constraint

84
09:34.330 --> 09:35.590
el nombre de la relación

85
09:48.140 --> 09:49.300
el nombre de la clave extranjera

86
10:03.050 --> 10:03.740
Referencias

87
10:11.850 --> 10:12.440
Estudiantes

88
10:15.970 --> 10:16.770
la clave principal

89
10:22.930 --> 10:31.070
ahora se crea hasta comprobar de nuevo para ver si podemos eliminar la identificación del estudiante 3 y no podemos

90
10:34.110 --> 10:39.660
por lo que es cómo crear utilizando la interfaz de usuario y a través de código en este caso en particular es probablemente

91
10:39.720 --> 10:42.330
más fácil de usar la interfaz de usuario

92
10:47.350 --> 10:54.640
una relación de uno a muchos. aquí vamos a introducir una mesa llamada estantería.

93
10:54.910 --> 11:02.470
Esto indicará la ubicación de un libro dentro de una biblioteca una estantería puede contener muchos libros en este

94
11:02.470 --> 11:02.790
Demo.

95
11:02.800 --> 11:06.140
Crearemos una mesa de estantería con una identificación.

96
11:06.280 --> 11:10.150
Clave principal y ubicación.

97
11:10.150 --> 11:19.540
Añadiremos la identificación de estantería como una columna de la tabla de libros y vamos a definir la identificación de estantería como el extranjero

98
11:19.540 --> 11:26.290
clave vamos a definir la relación entre ID en la mesa de estantería y ID de estantería en los libros

99
11:26.290 --> 11:27.510
Mesa.

100
11:28.060 --> 11:35.140
Y luego demostraremos la integridad de la relación al intentar eliminar una estantería que tiene libros

101
11:35.140 --> 11:37.200
en él.

102
11:37.240 --> 11:44.870
Demostraremos una relación de uno a muchos usando la analogía de estanterías.

103
11:46.110 --> 11:52.810
Así que primero crearemos una mesa llamada estanterías.

104
11:57.300 --> 12:00.310
crear estantería de tabla (id int identity(1,1),

105
12:04.880 --> 12:05.500
clave principal.

106
12:07.590 --> 12:12.890
Esto quiere decir que la idea será la clave principal de la mesa de estantería.

107
12:13.360 --> 12:24.600
Y yo un va a usar la ubicación como varchar(max) para describir la ubicación del libro.

108
12:24.940 --> 12:27.910
Así que vamos a darle algunos datos de muestra.

109
12:28.090 --> 12:35.300
Insertar en estantería (ubicación) 

110
12:35.440 --> 12:40.000
Una vez más no hay necesidad de insertar en la columna ID.

111
12:41.530 --> 12:45.770
valores ('Estante junto a la ventana')

112
12:50.260 --> 12:52.320
Así que si echamos un vistazo a nuestra mesa de estanterías ahora.

113
12:58.160 --> 13:01.430
Ahora tenemos una fila llamada "estante al lado de la ventana"

114
13:03.050 --> 13:04.890
Así que echemos un vistazo a nuestra mesa de libros.

115
13:06.620 --> 13:12.370
Vamos a agregar una columna a esta tabla de libros llamada ID de estantería

116
13:15.980 --> 13:25.490
alterar los libros de mesa añadir bookshelfID int

117
13:31.710 --> 13:34.720
mira la mesa de libros.

118
13:34.790 --> 13:37.430
Observará que el bookShelfID tiene NULL en él

119
13:37.970 --> 13:40.550
Esto significa que no hay datos

120
13:44.400 --> 13:54.000
vamos a asignar ambos de estos libros a la misma bookshelfID

121
13:54.290 --> 13:55.130
actualizar los libros set bookShelfID-1

122
13:58.180 --> 13:59.300
vamos a ver nuestra mesa de libros de nuevo.

123
14:00.710 --> 14:04.400
Así que ahora ambos libros están en la estanteríaID

124
14:04.430 --> 14:04.670
Una

125
14:07.540 --> 14:13.210
por lo que con el fin de definir la relación entre estas dos tablas debe volver a nuestra base de datos

126
14:13.210 --> 14:13.710
Diagrama

127
14:18.400 --> 14:20.470
añadir la estantería de mesa

128
14:24.900 --> 14:27.150
y voy a definir

129
14:30.220 --> 14:35.420
lo que he notado es que el ID en la tabla de libros no es una clave principal.

130
14:35.430 --> 14:40.000
Estableceremos la clave principal allí y vamos a

131
14:43.580 --> 14:49.790
crear una amistad entre la id de estantería y la mesa de libros y la identificación en el ibookshelf

132
14:49.790 --> 14:51.310
tabla de la siguiente manera

133
14:55.740 --> 14:56.440
guardamos este

134
15:00.320 --> 15:06.510
así que esta es una relación de uno a muchos se puede ver esta es la uno a uno y este es uno demasiados

135
15:08.100 --> 15:15.390
concepto de que puedo ser más de un libro en la misma estantería, pero sólo un estudiante puede tener una

136
15:15.810 --> 15:19.680
tarjeta de membresía de la biblioteca.

137
15:20.130 --> 15:27.190
Por lo tanto, una vez más, esto no ha cambiado los datos y la tabla, pero ha aplicado la integridad de los datos.

138
15:27.690 --> 15:35.430
Así que por ejemplo, si voy a tratar de eliminar la estantería estos dos libros están en la base de datos se

139
15:35.430 --> 15:36.170
detenerme.

140
15:46.570 --> 15:51.190
He intentado eliminarlo.  La base de datos me ha detenido, si comprulo la mesa de estantería slatuya es

141
15:51.190 --> 15:51.920
todavía allí.

142
15:59.510 --> 16:01.990
Una relación de muchos a muchos.

143
16:02.030 --> 16:08.180
Aquí vamos a introducir una tabla llamada Préstamo de libro que indicará lo que los estudiantes han alquilado qué libros

144
16:09.560 --> 16:10.840
un estudiante puede prestar

145
16:10.910 --> 16:16.850
Muchos libros de un libro pueden ser prestados por muchos estudiantes en esta tabla

146
16:16.870 --> 16:19.770
Crearemos una mesa de préstamos contables con una identificación.

147
16:19.780 --> 16:30.190
Identificación del estudiante clave principal, clave externa de identificación del libro de claves y las fechas, como fecha de retirada de fecha para

148
16:30.190 --> 16:40.490
fecha de regreso devuelta. Definiremos la relación entre la identificación y la identificación del estudiante de los estudiantes

149
16:40.490 --> 16:41.570
Mesa.

150
16:41.850 --> 16:46.320
Y luego definiremos la relación entre la identificación y el libro listo en la tabla de libros.

151
16:47.090 --> 16:55.040
Y luego demostraremos la integridad de la relación al intentar eliminar a un estudiante que tiene una fila

152
16:55.060 --> 17:03.430
en la tabla de préstamos contables o la eliminación de un libro que tiene una fila en la tabla de préstamos contables. 

153
17:03.430 --> 17:07.140
El tercer tipo de relación es muchos a muchas relaciones.

154
17:07.410 --> 17:13.740
Vamos a demostrar lo que es una relación de muchos a muchos como crear una tabla de préstamos contables. 

155
17:13.740 --> 17:22.150
Un préstamo de libros que indica cuando un estudiante ha sacado un libro un estudiante puede sacar muchos libros y un libro

156
17:22.180 --> 17:24.450
puede ser sacado por muchos estudiantes.

157
17:24.460 --> 17:26.710
Esto es lo que significa para muchos a muchos.

158
17:26.850 --> 17:27.140
Unirse

159
17:30.000 --> 17:31.670
por lo que vamos a crear la tabla de préstamos contables

160
17:37.790 --> 17:41.980
id int identity(1,1), 

161
17:42.010 --> 17:42.690
La clave principal

162
17:46.380 --> 17:51.570
vamos a crear una columna para el identificador del estudiante (int)

163
17:54.920 --> 17:56.750
una identificación del libro

164
18:01.320 --> 18:06.140
y un par de fechas como datewithdrawn

165
18:13.010 --> 18:18.460
fechadevuelta y luego duedate

166
18:24.120 --> 18:29.800
por lo que esto indicaría cuando un estudiante ha tomado el libro en la biblioteca cuando va a volver.

167
18:29.800 --> 18:46.660
Y cuando se devolvió en algún momento en el futuro ejecutar. de nuevo a nuestro diagrama, añadir table bookloan

168
18:47.100 --> 18:58.180
Ahora necesitamos crear dos relaciones entre la identificación del estudiante y la identificación del estudiante

169
18:58.180 --> 19:02.950
arrastrar de aquí a allá y crear esto.

170
19:03.830 --> 19:06.990
Así que sólo trate de reorganizar este diagrama.

171
19:09.680 --> 19:18.280
Ahora desea crear la misma relación entre la columna ID del libro y la tabla bookloan con el ID

172
19:18.310 --> 19:22.610
columna en la tabla de libros. Nos arrastramos de allí a allá.

173
19:22.990 --> 19:23.920
Aceptar, Aceptar

174
19:26.810 --> 19:33.120
Así que aquí tenemos una relación uno a uno entre los estudiantes y la tarjeta de membresía de la biblioteca.

175
19:33.160 --> 19:39.660
Queremos muchas relaciones entre el préstamo contable y los estudiantes y la relación de uno a muchos entre bookloan

176
19:39.660 --> 19:41.190
libros juntos.

177
19:41.240 --> 19:46.240
Esto hace que muchas relaciones sean muchas. Así que vamos a salvar este

178
19:51.130 --> 19:52.610
y voy a tratar de demostrar

179
19:55.180 --> 19:58.180
la integridad de la relación.

180
19:58.180 --> 20:01.480
Así que primero echemos un vistazo a nuestros estudiantes.

181
20:06.540 --> 20:10.590
Así que una vez más Peter Murphy es el estudiante 3.

182
20:10.620 --> 20:11.610
Tomemos una de eso.

183
20:13.290 --> 20:14.400
Echemos un vistazo a los libros

184
20:22.840 --> 20:26.880
y diremos que el primer libro de Harry Potter es ID 1

185
20:30.980 --> 20:36.170
puede notar que SQL Server está resaltando un error aquí porque esto no es SQL.

186
20:36.170 --> 20:39.340
Es sólo texto usado para hacer un comentario.

187
20:39.430 --> 20:41.020
Pulse dos veces el botón de guión

188
20:46.320 --> 20:50.920
así que ahora vas a insertar en la mesa de préstamos de libros.

189
20:51.120 --> 21:01.030
El hecho de que Peter Murphy haya sacado este libro de Harry Potter para insertarlo en bookloan, 

190
21:01.080 --> 21:07.130
una vez más, no inserte en la columna ID

191
21:07.830 --> 21:12.720
(StudentId,BookID,DateWithdrawn,DateDue)

192
21:12.840 --> 21:15.110
(StudentId,BookID,DateWithdrawn,DateDue)

193
21:15.500 --> 21:22.500
Este libro aún no ha sido devuelto así que dejaremos esa columna. 

194
21:22.500 --> 21:29.860
Estudiante ID 3 que es Peter Murphy, BookID 1 que es un libro de Harry Potter Cámara de secretos 

195
21:30.150 --> 21:48.830
Fecha Retirada, Diremos que es 2020-01-01 y está previsto que sea 2020-30-01

196
21:48.920 --> 21:50.990
Así que eso sería el 30 de enero

197
21:55.250 --> 21:56.690
insertar en la mesa de préstamos contables

198
21:57.080 --> 21:59.310
Así que si ahora seleccionamos de la tabla de préstamos contables

199
22:02.390 --> 22:08.880
podemos ver que tenemos ideo estudiantil 3 ha sacado el libro ID 1 en esta fecha y se debía volver

200
22:08.880 --> 22:12.880
en esa fecha. Ahora para demostrar la integridad relacional.

201
22:12.900 --> 22:14.960
Voy a tratar de eliminar la identificación del estudiante 3

202
22:27.810 --> 22:30.260
Y la base de datos me ha detenido.

203
22:30.360 --> 22:32.930
¿Qué pasa si intenté eliminar el libro 1

204
22:38.920 --> 22:45.050
una vez más la base de datos me ha detenido y ambos libros todavía están presentes.

205
22:45.050 --> 22:46.340
Todos los estudiantes siguen presentes.

206
22:51.140 --> 23:00.140
Combinaciones: para escribir una instrucción select que devuelve datos de dos tablas a la vez en función de una relación de datos.

207
23:00.140 --> 23:09.050
seleccionar * de los estudiantes unirse a LibraryMembershipCard en Students.id ? LibraryMembershipCard.studentID

208
23:09.140 --> 23:11.920
seleccionar * de los estudiantes unirse a LibraryMembershipCard en Students.id ? LibraryMembershipCard.studentID

209
23:11.990 --> 23:12.740
seleccionar * de los estudiantes unirse a LibraryMembershipCard en Students.id ? LibraryMembershipCard.studentID

210
23:16.480 --> 23:24.280
unión izquierda: De forma predeterminada, una combinación filtrará las filas en las que no existe una relación si desea

211
23:24.280 --> 23:27.670
para devolver todas las filas, pero deje los datos en blanco.

212
23:28.150 --> 23:33.610
Es decir, NULL donde no se encuentra ninguna relación y se puede utilizar una unión izquierda para comparar los resultados de la

213
23:33.610 --> 23:41.170
consulta anterior cuando se utiliza la combinación izquierda en su lugar

214
23:41.350 --> 23:48.860
seleccionar * fron estudiantes a la izquierda unirse a LibraryMembershipCard en students.id .

215
23:48.860 --> 23:50.960
Escribir uniones puede llegar a ser muy detallado.

216
23:51.050 --> 23:57.090
Así que aquí hay un truco abreviado para acortar sus instrucciones SQL mediante el uso de alias de tabla

217
23:57.090 --> 24:07.170
seleccionar * de los estudiantes s unirse a LibraryMembershipCard L en S.id - L.studentID

218
24:07.180 --> 24:11.760
Y aquí hay un video que muestra estas declaraciones ejecutando

219
24:15.930 --> 24:24.240
cuando hemos hecho una configuración de relación podemos usar la palabra clave Join en SQL para escribir instrucciones select

220
24:24.690 --> 24:33.120
que devuelven datos de más de una tabla, así que vamos a demostrar que con el primer tipo el uno a uno

221
24:33.180 --> 24:34.610
Relación.

222
24:35.120 --> 24:55.380
Seleccione * de los alumnos unirse a librarymembershipcard en los alumnos. Id: librarymembershipcard.studentID

223
24:58.220 --> 25:00.160
Seleccione * de los alumnos unirse a librarymembershipcard en los alumnos. Id: librarymembershipcard.studentID

224
25:03.460 --> 25:04.160
Seleccione * de los alumnos unirse a librarymembershipcard en los alumnos. Id: librarymembershipcard.studentID

225
25:07.070 --> 25:09.990
y ejecute esta declaración.

226
25:10.090 --> 25:18.370
Así que aquí se pueden ver los resultados donde tenemos datos de los estudiantes de la primera tabla combinados con datos

227
25:18.430 --> 25:30.680
de la segunda tarjeta de membresía de la biblioteca de tablas ahora he hecho una unión estándar aquí que regresa

228
25:30.920 --> 25:41.600
solo las filas en las que los datos han coincidido. También puede utilizar una unión izquierda que también devolverá filas donde

229
25:41.660 --> 25:51.260
los datos no han coincidido. Así que ahora puede ver la diferencia donde las filas 1 y 2 han vuelto.

230
25:51.260 --> 25:57.110
Mary Smith, Mary Reid sin embargo los datos de la segunda tabla es NULL porque no existe.

231
25:57.920 --> 26:07.940
Así que esa es nuestra elección entre que es una unión a la izquierda y esta es una unión estándar, Así que ahora vamos a echar un vistazo

232
26:08.240 --> 26:17.150
en el segundo tipo de relación que es una relación de uno a muchos que son nuestras estanterías.

233
26:17.150 --> 26:17.890
Así que echemos un vistazo.

234
26:18.920 --> 26:19.860
seleccionar * de los libros unir la estantería en books.bookshelfID - bookshelf.id

235
26:25.880 --> 26:27.440
seleccionar * de los libros unir la estantería en books.bookshelfID - bookshelf.id

236
26:27.480 --> 26:27.860
seleccionar * de los libros unir la estantería en books.bookshelfID - bookshelf.id

237
26:27.890 --> 26:29.050
seleccionar * de los libros unir la estantería en books.bookshelfID - bookshelf.id

238
26:32.300 --> 26:47.040
una vez más si ahora tiene datos de ambas tablas que regresan

239
26:50.650 --> 26:55.520
El tercer tipo de unión es el muchos a muchos que es

240
26:58.510 --> 27:02.190
la tabla de préstamos contables.

241
27:02.290 --> 27:09.000
Queremos unir en dos mesas ahora la mesa de estudiantes y la mesa de libros.

242
27:09.030 --> 27:14.750
seleccionar * de bookloan unirse a los estudiantes en students.id bookloan.studentID

243
27:17.650 --> 27:20.670
seleccionar * de bookloan unirse a los estudiantes en students.id bookloan.studentID

244
27:20.930 --> 27:28.250
seleccionar * de bookloan unirse a los estudiantes en students.id bookloan.studentID

245
27:28.250 --> 27:40.310
Así que eso se une en la mesa de los estudiantes, así que, pero también queremos unirnos a la mesa de libros. Así que ahora podemos escribir

246
27:41.140 --> 27:41.560
unirse a los libros de books.id bookloan.bookid

247
27:41.890 --> 27:42.310
unirse a los libros de books.id bookloan.bookid

248
27:45.910 --> 27:57.660
esto ahora devuelve datos de las tres tablas de la tabla de préstamos contables, la tabla de estudiantes y la tabla de libros.

249
27:57.990 --> 28:03.810
Ahora puede notar que estas instrucciones de combinación comienzan a ser un poco detalladas.

250
28:03.810 --> 28:13.380
Así que lo que puede hacer es agregar alias de tabla que es simplemente un nombre más corto para cada tabla.

251
28:14.160 --> 28:20.400
Así que estoy usando S B y luego reemplazando estos

252
28:31.080 --> 28:37.500
misma consulta más concisa.

253
28:37.500 --> 28:46.580
Y por ejemplo, si quisiéramos ver sólo los datos de la tabla de estudiantes y libros podemos decir 

254
28:46.590 --> 28:52.040
S.* , B.*

255
28:53.010 --> 29:01.570
Así que estos son los estudiantes y los libros.

256
29:01.890 --> 29:09.720
Así que a ti; ahora como una prueba previamente definimos libros para tener un solo autor.

257
29:09.840 --> 29:13.240
Pero hay libros que pueden tener más de un autor.

258
29:13.350 --> 29:20.690
Entonces, ¿cómo modificamos el diseño de la base de datos para admitir libros que tienen más de un autor y hacen cumplir

259
29:20.700 --> 29:23.190
esta relación.

260
29:23.190 --> 29:26.480
Así que inicie este video y cuando se le pregunte.

261
29:26.610 --> 29:30.420
Pulse pausa y dé esto a usted mismo.

262
29:30.420 --> 29:34.890
Una vez que les haya dado una oportunidad continuar el video y ver cómo lo hizo

263
29:41.390 --> 29:42.550
en este ejercicio.

264
29:42.560 --> 29:46.630
Vamos a abordar un problema del mundo real aquí.

265
29:46.640 --> 29:49.440
Hay un problema con el diseño de nuestra base de datos.

266
29:49.580 --> 29:55.640
Hemos asumido que sólo puede haber un autor para cada libro.

267
29:55.670 --> 30:02.070
Sin embargo, es muy posible que un libro pueda tener más de un autor.

268
30:02.200 --> 30:08.380
Por ejemplo, este libro pequeñas cosas bonitas fue escrito por dos autores diferentes.

269
30:09.250 --> 30:16.820
Así que me gustaría que ajustara el diseño de la base de datos para admitir varios autores por libro.

270
30:19.040 --> 30:20.700
Vete.

271
30:20.960 --> 30:23.140
Puede pausar este video ahora.

272
30:23.210 --> 30:24.440
Empieza de nuevo.

273
30:24.440 --> 30:26.040
Una vez que lo hayas probado.

274
30:27.290 --> 30:28.100
Pausa el video ahora

275
30:32.420 --> 30:44.600
Bien, veamos cómo te llevaste; esta es una relación de muchos a muchos porque un libro ahora tendrá la posibilidad de

276
30:44.600 --> 30:51.770
de tener múltiples autores, pero por supuesto un autor también puede escribir varios libros por lo que necesitamos

277
30:51.830 --> 31:00.690
dos nuevas tablas una para el autor y otra para almacenar la relación entre libros y autores.

278
31:00.690 --> 31:05.400
Así que vamos a llamar a ese autor de libros. 

279
31:05.530 --> 31:23.570
Comenzaremos con la tabla author: CREATE TABLE author( id int identity (1,1) primary key, authorname

280
31:26.290 --> 31:27.750
varchar(max)

281
31:33.140 --> 31:44.320
y ahora la tabla para almacenar nuestra relación entre los autores y los libros como una relación de muchos a muchos

282
31:50.100 --> 31:51.440
id int identity(1,1),

283
31:54.470 --> 31:55.580
clave primaria

284
31:59.200 --> 32:09.590
authorID int, BookID int

285
32:11.590 --> 32:19.440
No se necesitan más datos en esa tabla. Vamos a crear nuestros tres autores que serán J.K. Rowling para nuestro

286
32:19.440 --> 32:20.630
libros existentes.

287
32:20.880 --> 32:26.390
Sólo para refrescar tu memoria.

288
32:26.490 --> 32:29.810
Dos libros de J.K. Rowling al menos dos nuevos autores

289
32:47.940 --> 32:48.600
J.K. Rowling

290
32:54.580 --> 32:58.770
y J.K. Rowling.

291
32:59.180 --> 33:01.610
Y también quiero que estos dos autores aquí

292
33:18.710 --> 33:19.470
echemos un vistazo a nuestra tabla de autores.

293
33:27.320 --> 33:29.600
tenemos tres autores; Correcto.

294
33:29.770 --> 33:31.040
Echemos un vistazo a la mesa de libros

295
33:37.830 --> 33:38.140
Ahora.

296
33:38.410 --> 33:41.880
Ya no necesitaremos la columna de autor en esta tabla de libros.

297
33:41.950 --> 33:54.630
Por lo tanto, podemos usar el comando drop column para alterar los libros de tablas drop column author

298
33:58.580 --> 34:02.640
una vez más tenga cuidado con esto porque no hay deshacer en SQL Server.

299
34:02.660 --> 34:12.630
Por lo tanto, si tiene datos importantes en esta columna de autor, se eliminará. 

300
34:12.680 --> 34:15.390
Mirando la tabla de libros se elimina ahora la columna de autor

301
34:15.590 --> 34:18.350
No vamos a insertar un nuevo libro en la mesa de libros

302
34:22.170 --> 34:27.410
nombre de libro, páginas y BookshelfId

303
34:28.890 --> 34:37.770
Observe que no estoy insertando los autores en este punto; valores ('Pequeñas cosas bonitas',

304
34:42.190 --> 34:44.500
Páginas 438,

305
34:47.270 --> 34:48.090
ID de estantería 1

306
34:55.050 --> 34:57.690
así que en este punto nos quedan dos cosas por hacer.

307
34:57.690 --> 35:07.800
Una es configurar nuestras claves primarias y extranjeras nuestras relaciones y poblar los datos en el libro

308
35:07.920 --> 35:09.440
tabla de autor.

309
35:09.510 --> 35:14.160
Así que vamos a abrir nuestro diagrama de base de datos y agregar estas dos nuevas tablas

310
35:24.620 --> 35:25.610
Así que un...

311
35:33.030 --> 35:37.290
ID de libro está asociado con el ID de la tabla de libros

312
35:40.500 --> 35:48.060
y un ID de autor está asociado con el ID de la tabla de autor.

313
35:48.090 --> 35:52.180
Juntos esto se forma en la relación de muchos a muchos.

314
35:55.240 --> 35:55.970
Ahora guardamos esto; Salvar

315
35:56.600 --> 36:06.240
Sí.

316
36:06.830 --> 36:13.920
Ahora, echemos un vistazo a nuestra mesa de libros

317
36:14.880 --> 36:18.160
Nuestra tabla de autores también es una columna que ha reaparecido.

318
36:18.210 --> 36:31.990
Así que voy a dejar que, Ahora el libro ID 1 y 2 están escritos por el autor

319
36:31.990 --> 36:32.950
número uno.

320
36:33.670 --> 36:45.010
Así que por lo tanto vamos a; insertar en bookAuthor (authorID, bookID) valores (1,1)

321
36:45.010 --> 36:45.400
1 que es J.K. Rowling

322
36:45.840 --> 36:46.380
bookID 1

323
36:46.390 --> 36:46.600
Ejecutar

324
36:51.470 --> 36:58.160
segundo libro que es BookId 2 tiene el mismo autor.

325
36:58.870 --> 37:01.780
El tercer libro, sin embargo, tiene dos autores

326
37:04.460 --> 37:14.800
que es el ID d