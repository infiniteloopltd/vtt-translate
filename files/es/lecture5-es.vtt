WEBVTT

0
00:00.930 --> 00:09.570
Datos agregados; Agrupar datos; Consultas de datos agregadas; Los datos a veces caen naturalmente en grupos donde muchos

1
00:09.570 --> 00:15.340
las filas pueden compartir las mismas características; si mantuvieras una base de datos que incluyera los detalles de las personas,

2
00:15.340 --> 00:20.830
ver que los puntos de datos como el nombre y la dirección pueden ser razonablemente únicos cuando la nacionalidad y el género

3
00:20.830 --> 00:28.560
ser compartido entre muchas personas; consultas de datos agregados actúa sobre un grupo de datos que comparten una característica común

4
00:28.590 --> 00:33.830
conteo, suma, máximo, min y estadísticas.

5
00:33.830 --> 00:38.820
Hay muchas funciones con valores escalares que actúan sobre un grupo con un valor de retorno 1 por grupo.

6
00:39.050 --> 00:44.930
Estos incluyen: Count - devuelve el número de filas en un grupo o tabla. Sum - sumar todos los valores de un grupo

7
00:44.930 --> 00:52.850
o mesa; Max: busque el valor máximo en un grupo o tabla; Min - encontrar un valor mínimo en un grupo o tabla,

8
00:52.940 --> 00:55.840
AVG: busque el valor medio en un grupo por tabla.

9
00:55.980 --> 01:00.900
STDEV - Buscar la desviación estándar en un grupo o tabla; demostración de vídeo.

10
01:01.160 --> 01:05.320
Mostrará una selección de funciones estadísticas mencionadas en la diapositiva anterior.

11
01:07.800 --> 01:13.090
Bien aquí vamos a demostrar algunas de las funciones de valor escalar en SQL Server.

12
01:13.200 --> 01:15.180
Así que vamos a empezar con el conteo

13
01:15.370 --> 01:16.360
Echemos un vistazo a nuestra mesa de libros

14
01:20.710 --> 01:29.450
y ver sólo tres libros en esa tabla para que podamos usar count(*) para indicar el número de filas en la tabla.

15
01:29.500 --> 01:29.800
Tres

16
01:34.300 --> 01:43.390
podemos encontrar; utilizar sum() para encontrar el número total de páginas en todos los libros de nuestra biblioteca.

17
01:43.450 --> 01:44.410
sum(páginas)

18
01:48.030 --> 01:50.140
1177

19
01:50.360 --> 01:56.230
Puede encontrar el número máximo de páginas en cualquier libro en nuestra biblioteca.

20
01:56.240 --> 02:01.100
438;  o el libro más corto de nuestra biblioteca - 

21
02:01.290 --> 02:14.110
mediante el uso de Min;  326; la longitud media del libro en nuestra biblioteca 392; o la desviación estándar de la

22
02:14.110 --> 02:15.440
páginas de nuestra biblioteca.

23
02:15.440 --> 02:16.270
Sería 58

24
02:19.960 --> 02:25.720
Agrupar por es una cláusula que separa una tabla en grupos de datos para que las funciones con valores escalares puedan

25
02:25.720 --> 02:27.910
utilizados en cada grupo de datos.

26
02:27.970 --> 02:34.630
Por ejemplo, un banco podría usar "agrupar por" para determinar el saldo bancario promedio por código postal / código postal

27
02:35.260 --> 02:42.160
seleccionar código postal,avg(balance) del grupo BankAccounts por zipCode

28
02:42.160 --> 02:46.840
demostración de vídeo.

29
02:47.170 --> 02:53.520
Aquí demostraremos el grupo por cláusula a; lista regún al número de libros escritos por cada autor.

30
02:53.770 --> 03:01.080
Encontrar el número de páginas escritas por cada autor, ordenadas por páginas;  

31
03:01.080 --> 03:02.030
Aquí voy a demostrar el grupo por cláusula.

32
03:02.130 --> 03:07.140
En primer lugar para enumerar el número de libros escritos por cada autor y en segundo lugar para enumerar el número de páginas

33
03:07.140 --> 03:09.380
escrito por cada autor ordenado por páginas.

34
03:10.170 --> 03:17.190
Así que vamos a agrupar por en el nombre del autor y luego usar count en la primera instancia para encontrar el número

35
03:17.190 --> 03:23.220
de libros y suma en la segunda instancia para sumar todas las páginas.

36
03:23.340 --> 03:25.100
Así que primero vamos a escribir nuestra consulta básica

37
03:29.280 --> 03:31.760
seleccionar * del autor; para conseguir a nuestros autores.

38
03:31.840 --> 03:41.500
Ahora tenemos que unir esto en la mesa bookauthor;
unirse a BookAuthor ba on ba.authorId - a.id

39
03:46.880 --> 03:49.420
y agrupar esto en el nombre del autor

40
03:53.310 --> 03:55.190
ahora antes de ejecutar esta consulta.

41
03:55.190 --> 04:03.590
Causará un error a menos que cambie la estrella a la que se agrupa una columna; para demostrar el error.

42
04:03.610 --> 04:14.190
Si trato de ejecutar esto; dice que no es válido en la lista de selección; así que si sólo digo nombre de autor en su lugar

43
04:14.190 --> 04:18.130
de Estrella obtengo el nombre del autor.

44
04:18.750 --> 04:22.350
Ahora puedo agregar funciones de valor escalar como Count

45
04:26.710 --> 04:29.660
ahora me muestra que J.K. Rowling ha escrito dos libros.

46
04:30.140 --> 04:43.820
Dhonielle ha escrito uno; y Sona ha escrito uno; así que si ahora queremos sumar nuestras páginas podemos cambiar - 

47
04:44.060 --> 04:46.160
Pero primero tenemos que unirnos en la mesa de libros

48
04:51.600 --> 04:53.510
unirse a los libros b sobre b.id ba.bookid

49
04:53.920 --> 04:55.520
unirse a los libros b sobre b.id ba.bookid

50
04:55.770 --> 04:57.350
unirse a los libros b sobre b.id ba.bookid

51
05:00.900 --> 05:01.800
mirada rápida a eso.

52
05:11.690 --> 05:15.280
Así que aquí tenemos toda la tabla desagrupada

53
05:15.450 --> 05:17.110
Queremos agruparnos en esto.

54
05:17.210 --> 05:20.890
Bueno para sumar en la tabla de páginas y agrupar por el nombre del autor

55
05:24.090 --> 05:35.280
grupo por authorName ... sum(páginas)

56
05:35.520 --> 05:43.100
Y la última parte de esto es ordenar por las páginas que puede escribir simplemente; orden por suma (páginas)

57
05:49.050 --> 05:52.900
y esta lista ahora está ordenada por páginas totales.

58
05:54.860 --> 05:57.650
Para hacer esto más conciso podemos darle a esto un alias de columna

59
06:01.900 --> 06:12.870
e incluya el alias de columna en el orden por; y ahora tenemos un nombre para esa columna. 

60
06:13.020 --> 06:15.630
Tener cláusula; Es similar a la cláusula where opera en grupos.

61
06:16.470 --> 06:21.930
Así que si un banco quería enumerar los códigos postales sólo donde el saldo promedio de la cuenta bancaria era más de un millón

62
06:21.930 --> 06:28.200
dólares entonces podrían usar; seleccionar código postal, avg(balance) de bankAccounts

63
06:28.860 --> 06:37.720
grupo por código postal que tiene avg(balance)>1000000

64
06:37.910 --> 06:43.210
Aquí hay una demostración de la cláusula having; ¿dónde va a mostrar los autores de la lista que han escrito al menos

65
06:43.210 --> 06:45.630
dos libros.

66
06:45.860 --> 06:52.290
Bien aquí vamos a demostrar que tener cláusula; enumerando a autores que han escrito al menos dos libros.

67
06:52.400 --> 06:58.100
Así que una vez más vamos a seleccionar de la tabla de autores unidos en la tabla de autores del libro y estamos

68
06:58.100 --> 07:06.730
va a ejecutar un recuento de cada autor; seleccionar * de autores

69
07:10.800 --> 07:12.160
unirse a la mesa bookauthor

70
07:22.330 --> 07:33.880
ahora queremos agrupar sólo el nombre del autor, e incluir un recuento

71
07:34.140 --> 07:40.320
Ahora nada puede aparecer en la lista de selección a menos que esté en la cláusula group by o si es una función escalar.

72
07:44.630 --> 07:53.210
Incluya un recuento.

73
07:53.320 --> 07:58.190
Ahora tenemos todos los autores y el número de libros que he escrito.

74
07:58.290 --> 08:02.220
Ahora quieres limitar esto a todos aquellos que están escritos al menos dos libros.

75
08:02.310 --> 08:04.620
Así que puedo decir que tener count(*)>-2

76
08:13.410 --> 08:14.870
y devuelve a J.K. Rowling

77
08:18.230 --> 08:23.870
variables globales del sistema; Hay ciertas variables que están disponibles en todo el sistema en SQL Server

78
08:24.150 --> 08:26.230
y no dependen del contexto de la base de datos.

79
08:26.270 --> 08:32.260
Estos incluyen @@connections al número de conexiones de base de datos al inicio; @@identity la última identidad

80
08:32.410 --> 08:40.070
columna insertada; @@CPU_Busy la cantidad de milisegundos, vea SQL ServerSQL Server ha utilizado la CPU..

81
08:40.100 --> 08:45.400
@@Language: el idioma que usa ACTUALmente SQL Server. @@RowCount el número de filas realizadas por la última instrucción SQL

82
08:46.070 --> 08:51.290
@@SERVERNAME El nombre del servidor SQL;  @@VERSION la versión de SQL Server.

83
08:53.150 --> 08:58.960
Demostración en vídeo; Aquí se mostrarán algunas variables globales del sistema para generar un diagnóstico simple

84
08:58.960 --> 09:01.410
informe para otro desarrollador.

85
09:01.720 --> 09:08.500
Queremos informar de la versión exacta de SQL Server a un desarrollador y desea comprobar si hay conexiones excesivas

86
09:08.620 --> 09:12.150
o el uso de la CPU.

87
09:12.320 --> 09:15.790
Bien aquí vamos a demostrar algunas variables globales del sistema.

88
09:16.420 --> 09:19.910
Por lo tanto, queremos informar de la versión exacta de SQL Server al desarrollador.

89
09:19.930 --> 09:22.350
Así que vamos a estos simplemente seleccionar la versión actual

90
09:25.540 --> 09:27.740
ahora esto se trunca.

91
09:27.800 --> 09:32.850
Así que tal vez le gustaría ver esto como texto en lugar de una cuadrícula.

92
09:32.920 --> 09:36.590
¿En qué caso podemos ir a los resultados al texto.

93
09:38.820 --> 09:43.510
Y esa es nuestra versión completa de SQL Server

94
09:45.270 --> 09:52.560
Echemos un vistazo; por ejemplo; nuestro número de conexiones OK.

95
09:52.570 --> 09:54.680
Tenemos doscientos noventa y nueve.

96
09:54.700 --> 09:56.100
Eso es mucho.

97
09:56.110 --> 10:03.070
Veamos qué sucede cuando restablecemos SQL Server y ejecutamos esta consulta de nuevo, así que hagamos clic con el botón derecho

98
10:16.870 --> 10:24.330
y vamos a volver a ejecutar esto; y estamos de vuelta hacia abajo.

99
10:24.510 --> 10:25.320
Ahora se acabó para ti.

100
10:25.740 --> 10:27.380
Veamos si puedes aplicar lo que has aprendido.

101
10:28.290 --> 10:33.690
Escriba una consulta que muestre cuántos estudiantes nacimos en cada mes del año.

102
10:34.050 --> 10:40.590
Puede pausar este vídeo ahora y probar esta consulta.

103
10:41.130 --> 10:41.580
De acuerdo.

104
10:41.590 --> 10:46.540
Así que vamos a escribir una consulta que mostrará cuántos estudiantes nacieron en cada mes del año.

105
10:46.540 --> 10:51.850
Espero que hayas hecho esto una primera oportunidad de ser no puedes pausar este video ahora y darle una oportunidad.

106
10:52.380 --> 10:54.160
Bien, aquí está la solución.

107
10:54.200 --> 11:03.250
Queremos ver a nuestros estudiantes en la mesa.

108
11:03.460 --> 11:12.190
Necesitamos una función para determinar el mes de la fecha de nacimiento que usaré mes (dateOfBirth)

109
11:17.250 --> 11:19.650
3 para el 1 de mar