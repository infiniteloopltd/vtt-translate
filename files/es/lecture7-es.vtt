WEBVTT

0
00:01.980 --> 00:11.750
Procedimientos almacenados y funciones definidas por el usuario; hacer operaciones complejas simples; Procedimientos almacenados

1
00:11.750 --> 00:18.800
Los procedimientos almacenados proporcionan una manera de encapsular operaciones de base de datos complejas en una instrucción de una línea reutilizable.

2
00:18.800 --> 00:26.090
De esta manera hace que la base de datos sea más fácil de operar y realmente mejora el rendimiento; para crear una

3
00:26.300 --> 00:28.380
utilice el siguiente formato.

4
00:28.430 --> 00:36.690
Crear el procedimiento y, a continuación, el nombre del procedimiento "" el nombre de la variable, el tipo de datos, cualquier otro

5
00:36.690 --> 00:43.380
variables como y, a continuación, la instrucción SQL.

6
00:43.900 --> 00:50.080
Demostración en vídeo; aquí vamos a demostrar un procedimiento almacenado que se llamará cuando se presta un libro

7
00:50.250 --> 00:50.980
de la biblioteca.

8
00:52.720 --> 00:58.280
Aceptamos dos parámetros de identificación del estudiante y el ID del libro 

9
00:58.280 --> 00:58.980
En el procedimiento almacenado

10
00:59.060 --> 01:02.080
Llevaremos a cabo las siguientes operaciones.

11
01:02.540 --> 01:06.890
Crear una transacción; añadir un préstamo a la tabla de préstamos contables.

12
01:06.890 --> 01:14.750
A partir de hoy, y para ser devuelto dentro de un mes, actualice la tabla de libros para indicar que el libro se retira

13
01:16.320 --> 01:18.200
y finalmente comprometerse a la transacción.

14
01:21.690 --> 01:28.830
Aquí vamos a demostrar la creación de un procedimiento almacenado que creará una transacción; añadir un préstamo

15
01:28.830 --> 01:35.130
a la tabla de préstamos contables y luego actualizar la tabla de libros para indicar que el libro se retira y luego finalmente

16
01:35.130 --> 01:37.180
confirmar la transacción.

17
01:37.320 --> 01:44.480
Así que echemos un vistazo a la mesa de préstamos contables

18
01:44.820 --> 01:51.790
Así que para llevar a cabo esta operación podemos calcular la fecha retirada porque será la fecha actual.

19
01:51.870 --> 01:58.230
Podemos calcular la fecha de vencimiento porque será de 30 días a partir de hoy o de un mes a partir de hoy.

20
01:58.230 --> 02:02.160
El ID del alumno y el ID del libro deberán pasarse al procedimiento almacenado.

21
02:02.160 --> 02:03.770
Así que hagámoslo.

22
02:03.790 --> 02:08.490
Procedimiento de creación WithdrawBook

23
02:14.440 --> 02:25.890
Necesitará la identificación del estudiante que es de tipo int, ID de libro, que también es de tipo int

24
02:26.280 --> 02:31.720
Ahora queremos crear la transacción que es; Iniciar transacción

25
02:35.960 --> 02:41.290
insertar en bookloan (studentID, bookId, dateWithdrawn, dateDue) valores

26
02:41.910 --> 02:47.640
insertar en bookloan (studentID, bookId, dateWithdrawn, dateDue) valores

27
02:48.500 --> 02:58.320
Los valores para esto serán el identificador de estudiante tal como se pasó; el ID del libro tal como se pasó;

28
02:58.450 --> 03:06.050
La fecha retirada es la fecha actual; y la fecha de vencimiento es de un mes a partir de hoy; que escribes como;

29
03:06.050 --> 03:15.710
dateadd(month,1,getdate())

30
03:15.800 --> 03:21.410
También queremos actualizar la tabla de libros; así que echemos un vistazo a la mesa de libros.

31
03:23.030 --> 03:31.450
Bien, queremos actualizar el ID de estantería y establecerlo en 6 para indicar que está retirado

32
03:31.520 --> 03:39.520
los libros de actualización establecen bookShelfId6 donde id-@bookid

33
03:40.810 --> 03:43.700
Y finalmente confirmar la transacción

34
03:49.890 --> 03:50.230
Bien.

35
03:50.270 --> 03:59.800
Así que lo que realmente hemos hecho aquí su hemos envuelto estas pocas líneas de SQL en una línea de SQL

36
04:00.020 --> 04:01.190
que voy a demostrar ahora.

37
04:02.000 --> 04:06.760
Así que echemos un vistazo a nuestra mesa de libros por un momento.

38
04:06.800 --> 04:12.990
Supongamos que desea retirar el libro 3.

39
04:13.540 --> 04:14.860
Echemos un vistazo a nuestra mesa de estudiantes

40
04:20.590 --> 04:22.240
y tomaremos.

41
04:22.280 --> 04:24.260
PETER MURPHY como estudiante

42
04:29.250 --> 04:39.660
así; para ejecutar un procedimiento almacenado, escriba el nombre del procedimiento almacenado; 

43
04:39.670 --> 04:46.260
primer parámetro es la identificación del estudiante que es 3; segundo parámetro es BookID que también es 3.

44
04:46.330 --> 04:53.230
Así que ahora ejecuto esta declaración; Se han visto afectadas 3 filas.

45
04:53.330 --> 04:56.000
El primero es insertar en el préstamo contable.

46
04:56.060 --> 05:02.770
El segundo son los libros de actualización y el tercero sería en realidad el desencadenante del ejercicio anterior.

47
05:02.900 --> 05:08.220
Así que echemos un vistazo y veamos lo que ha sucedido; seleccionar * de bookloan

48
05:11.880 --> 05:18.380
ahora podemos ver este tercer préstamo de libro en cuyo caso el estudiante ID 3 ha sacado el libro ID 3

49
05:19.680 --> 05:20.710
Echemos un vistazo a nuestros libros

50
05:26.300 --> 05:37.440
y también podemos ver que el libro ID 3 ahora está configurado en id de estantería 6; por lo tanto, hemos terminado estos

51
05:37.530 --> 05:43.020
cuatro líneas de SQL en esta pequeña instrucción muy simple.

52
05:44.240 --> 05:47.800
Y en realidad esto también ayuda al rendimiento; 

53
05:47.810 --> 05:50.340
Así que no sólo hace que su SQL sea más conciso.

54
05:50.340 --> 05:51.290
Lo hace más rápido

55
05:54.100 --> 05:59.580
Funciones definidas por el usuario o UDF; 

56
05:59.630 --> 06:06.110
Las funciones definidas por el usuario también envuelven SQL más complejo de una manera reutilizable; pero están diseñados para ser llamados desde dentro de un

57
06:06.190 --> 06:09.290
Instrucción SQL en lugar de por sí solas como un procedimiento almacenado.

58
06:10.300 --> 06:17.010
Para crear una función definida por el usuario, utilice el formato; crear la función "nombre de la función", @variable

59
06:20.080 --> 06:23.680
devuelve int como y, a continuación, la instrucción SQL.

60
06:26.210 --> 06:32.590
Demostración en vídeo; Aquí vamos a crear una función definida por el usuario para calcular la fecha de devolución de un

61
06:32.590 --> 06:40.210
libro que satisface lo siguiente; 30 días a partir de hoy; y luego alterar el procedimiento almacenado para usar este

62
06:40.420 --> 06:45.070
UDF para el cálculo de la fecha de devolución

63
06:45.100 --> 06:50.260
Aquí demostraremos la creación de una función definida por el usuario que calculará la fecha de devolución de un

64
06:50.260 --> 06:52.820
libro que es 30 días a partir de hoy.

65
06:53.890 --> 07:01.510
Así que para ello tetemos: crear la función CalculateDueDate

66
07:04.570 --> 07:08.830
Aquí pasaría cualquier parámetro, en este caso.

67
07:08.830 --> 07:09.630
No tenemos.

68
07:09.640 --> 07:13.990
Así que son paréntesis vacíos, devuelve.

69
07:14.040 --> 07:15.700
Nombre del tipo de datos.

70
07:15.720 --> 07:21.630
Del valor devuelto que en este caso la hora de la fecha, como comienza.

71
07:22.860 --> 07:33.650
Return dateadd(day, 30, getdate())

72
07:35.510 --> 07:42.330
Para demostrar esta función a la que se llama; Escriba una instrucción select.

73
07:44.440 --> 07:54.940
Para llamar a una función definida por el usuario la prefijamos con dbo, que significa una base de datos todo propietario y

74
07:54.940 --> 08:03.790
llamamos a la función así; ejecutar; y esto devuelve la fecha dentro de 30 días.

75
08:03.790 --> 08:12.250
La fecha será diferente en su ejemplo; por lo que el siguiente paso en este procedimiento es actualizar el almacenado

76
08:12.250 --> 08:19.090
procedimiento con esta nueva función definida por el usuario en lugar de usar dateAdd directamente.

77
08:19.960 --> 08:29.460
Así que si volvemos al procedimiento almacenado que habíamos creado en el video anterior; vamos a reemplazar

78
08:30.300 --> 08:42.300
dateAdd y con la función definida por el usuario que es CalculateDueDate y en lugar de crear para utilizar el

79
08:42.300 --> 08:45.010
palabra alterar.

80
08:45.030 --> 08:46.680
Ahora ejecute esta actualización

81
08:52.550 --> 09:01.610
nuestro procedimiento almacenado ahora utiliza una función definida por el usuario para extraer aún más algunos SQL más complejos

82
09:04.450 --> 09:10.840
opiniones; las vistas son una forma de hacer que las instrucciones selectas complejas parezcan una tabla.

83
09:10.840 --> 09:16.940
De esta manera se puede abstraer una lógica más compleja y el usuario puede escribir instrucciones select

84
09:16.940 --> 09:24.910
la vista como si fuera una mesa; vistas creadas con el formato create view seguido de su nombre de vista

85
09:25.360 --> 09:29.690
como selección; y su declaración selecta

86
09:32.400 --> 09:34.470
demostración de vídeo.

87
09:34.500 --> 09:42.030
En este video creará una vista de los préstamos pendientes que incluirán: el nombre completo del estudiante

88
09:42.450 --> 09:50.240
el nombre del libro; el número de días atrasados o restantes del préstamo; y ordenado por nombre de estudiante.

89
09:50.410 --> 09:57.700
A continuación, demostraremos cómo escribir instrucciones select en la vista cambiando el orden de los resultados.

90
09:58.190 --> 10:05.160
Ahora va a demostrar la creación de una vista que puede ajustar una instrucción select compleja en una más simple

91
10:06.660 --> 10:08.590
por lo que se comportará un poco como una mesa.

92
10:08.670 --> 10:13.230
Así que vamos a ver en este video vamos a crear una vista de los préstamos de libros pendientes que incluirán

93
10:13.230 --> 10:16.140
nombre completo del estudiante; el nombre del libro; y el número de días de retraso.

94
10:16.320 --> 10:22.230
Comencemos con una instrucción select; seleccionar * de bookloans

95
10:22.830 --> 10:28.010
Tendrá que unir esto tanto en la mesa de estudiantes como en la tabla de libros.

96
10:28.040 --> 10:36.860
unirse a los estudiantes s en s.id bl.studentID

97
10:37.210 --> 10:40.490
unirse a los libros b en b.id bl.bookId

98
10:40.760 --> 10:41.480
Gran.

99
10:42.810 --> 10:45.340
Así que estos deben ser todos los datos que necesitamos.

100
10:45.520 --> 10:48.270
Ahora tenemos que empezar con el nombre completo del estudiante.

101
10:48.280 --> 10:57.540
s.FirstName + ' ' + s.Surname como FullName

102
10:58.640 --> 11:02.200
Así que ahora tenemos el nombre completo del estudiante.

103
11:02.240 --> 11:07.230
Ahora también queremos el nombre del libro; que ya está aquí; y el número de días de retraso.

104
11:07.290 --> 11:08.450
Así que usamos una datediff

105
11:11.020 --> 11:11.410
datedif(day, datedue, getdate())

106
11:14.230 --> 11:17.160
datedif(day, datedue, getdate())

107
11:17.830 --> 11:23.700
Ese es el número de días de diferencia entre la fecha de vencimiento en la fecha actual, y lo llamaremos atrasado.

108
11:26.600 --> 11:36.550
La columna vencida es negativa porque la fecha de vencimiento es en el futuro; así que ahora no necesitamos todas las columnas

109
11:36.570 --> 11:40.730
así que sólo tiene el nombre del libro aquí.

110
11:41.770 --> 11:43.710
Eso nos ha dado nuestra declaración selecta.

111
11:43.750 --> 11:48.460
Ahora podemos terminar esto en una vista; diciendo;

112
11:48.500 --> 11:58.070
crear vista overdueLoans como 

113
11:58.300 --> 12:05.280
Y ahora si queremos ejecutar esa declaración selecta de nuevo podríamos simplemente hacer una selección * de overdueloans.

114
12:05.710 --> 12:11.380
Como si los préstamos atrasados fueran una mesa; y ahora podemos pedirlo por nombre completo

115
12:15.740 --> 12:19.160
que no va a afectar a las cosas porque es lo mismo.

116
12:19.160 --> 12:21.110
Podríamos ordenar por vencido descendiendo

117
12:26.500 --> 12:32.100
así que vamos a ver este va a la parte superior;  Aquí vamos.

118
12:32.110 --> 12:36.900
Así que este overdueloans como que aparece como una mesa.

119
12:36.940 --> 12:39.920
Pero en realidad es esta declaración selecta aquí.

120
12:40.090 --> 12:41.130
Esto es lo que es una vista.

121
12:43.350 --> 12:47.970
Tablas temporales; a veces cuando se trabaja con consultas complejas

122
12:48.090 --> 12:54.690
Es posible que desee almacenar los resultados intermedios en el almacenamiento temporal, pero no tiene necesidad de iniciarlos de forma permanente.

123
12:54.690 --> 13:01.570
Puede hacerlo creando tablas temporales con el prefijo hashtag; datos almacenados en tablas temporales

124
13:01.570 --> 13:06.390
se descartará una vez que se cierre la sesión y no sea visible para otras sesiones.

125
13:08.530 --> 13:17.890
Seleccionar en; si necesita copiar la salida de una instrucción select en una nueva tabla, puede

126
13:18.100 --> 13:26.450
seleccionar en sintaxis; se creará una tabla para usted y esta tabla no debe estar ya presente.

127
13:26.450 --> 13:31.760
Esto se utiliza a menudo junto con tablas temporales y tiene el formulario de selección en

128
13:34.630 --> 13:38.160
el nombre de la tabla temporal de la tabla

129
13:42.500 --> 13:45.040
insertar en seleccionar.

130
13:45.040 --> 13:51.550
Si desea copiar la salida de una instrucción select en una tabla existente, debe

131
13:51.550 --> 13:55.220
insertar en la sintaxis de selección.

132
13:55.240 --> 13:59.720
La tabla no debe existir antes de ejecutar la instrucción.

133
13:59.740 --> 14:09.040
Esto se utiliza a menudo junto con tablas temporales y tiene el formulario insertar en "nombre de tabla" "nombres de columna".

134
14:09.040 --> 14:12.880
Seleccionar nombres de columna de la tabla

135
14:17.260 --> 14:19.100
demostración de vídeo.

136
14:19.750 --> 14:27.650
Aquí vamos a crear una tabla temporal que tiene tres columnas BookName, Author1 y Author2

137
14:28.150 --> 14:33.290
Usaremos select en para crear la tabla para libros de un solo autor.

138
14:33.430 --> 14:39.240
Usaremos insert en para anexar a esta tabla para libros de doble autor.

139
14:39.330 --> 14:43.040
Demostraremos cómo una tabla temporal no es visible para otros usuarios de bases de datos.

140
14:45.080 --> 14:51.080
Bien, así que aquí vamos a demostrar tablas temporales donde vamos a crear una mesa temporal

141
14:51.080 --> 14:56.630
usando el comando Seleccionar en y luego vamos a anexar a la tabla temporal usando la inserción

142
14:56.720 --> 14:57.740
al mando.

143
14:58.520 --> 15:07.810
Así que lo que queremos son tres columnas uno o el nombre del libro; uno con el autor uno; un autor dos; así que lo que necesitamos

144
15:07.810 --> 15:14.150
hacer es primero encontrar una declaración selecta que nos dará libros de un solo autor solamente.

145
15:14.170 --> 15:20.570
Así que vamos a empezar con la tabla bookauthor; seleccionar * de bookAuthor

146
15:20.770 --> 15:29.020
Ahora lo que vamos a hacer es agrupar en BookID y usar una cláusula having para declarar que sólo queremos

147
15:31.040 --> 15:33.660
sólo uno de estos.

148
15:33.820 --> 15:34.710
Así que vamos.

149
15:36.190 --> 15:36.840
BookID

150
15:39.370 --> 15:41.640
Y grupo por bookId

151
15:42.780 --> 15:44.230
Bien.

152
15:44.370 --> 15:47.310
Tener count(*) es igual a 1.

153
15:47.710 --> 15:51.400
Así que estamos buscando aquí hay libros donde sólo hay un autor.

154
15:51.430 --> 15:59.430
Así que espero ver el libro 1 y 2; pero no 3. 1 y 2 no 3.

155
15:59.880 --> 16:00.970
Echemos un vistazo.

156
16:01.110 --> 16:06.060
Si queremos decir libros con dos autores sería así.

157
16:06.180 --> 16:08.210
Así que obtenemos el ID de libro 3

158
16:08.340 --> 16:10.680
Así que ahora vamos a unir eso en la mesa de libros

159
16:14.270 --> 16:24.850
unirse a los libros b sobre b.id ba.bookID

160
16:24.860 --> 16:30.480
Haremos lo mismo para la consulta de autor dual

161
16:31.260 --> 16:33.200
Ahora necesitaremos el nombre del libro aquí.

162
16:33.280 --> 16:37.300
Así que vamos a decir b.Bookname, y 

163
16:37.360 --> 16:40.040
el grupo por va a estar en el nombre del libro

164
16:40.090 --> 16:41.770
Así que lo haremos aquí y aquí.

165
16:42.250 --> 16:49.810
Por lo tanto, estos deben ser libros con un autor y esto debe ser libros con dos autores.

166
16:50.760 --> 16:54.310
Así que lo siguiente que necesitamos es el nombre del autor real.

167
16:54.540 --> 16:57.010
Así que vamos a unirnos al autor.

168
16:57.060 --> 17:01.650
unirse al autor a en a.id á ba.authorid

169
17:02.040 --> 17:05.290
unirse al autor a en a.id á ba.authorid

170
17:05.460 --> 17:06.530
lo mismo aquí.

171
17:12.660 --> 17:13.680
Y en este Select...

172
17:14.190 --> 17:15.750
Lo que necesitamos es una consulta agregada.

173
17:15.750 --> 17:20.790
Así que en este caso va a utilizar mínimo, pero para ser honesto puede ser cualquier cosa aquí porque sólo hay

174
17:20.790 --> 17:28.870
va a ser sólo uno así; AuthorName como autor1

175
17:29.520 --> 17:33.360
Aquí vamos a tener Min y Max

176
17:36.900 --> 17:44.620
así que diremos Min para author1 en max para author2.

177
17:44.790 --> 17:46.490
Así que vamos a ver cómo funciona.

178
17:47.550 --> 17:54.240
Así que el nombre del libro autor1 J.K. Rowling; nombre del libro autor2

179
17:54.330 --> 17:58.680
Así que ahí vamos; ahora; porque quiero combinar estas dos cosas.

180
17:58.740 --> 18:03.300
Quiero tener una columna author2 en esto; pero tiene que ser NULL.

181
18:03.750 --> 18:13.200
Así que lo que necesito hacer es convertir NULL al mismo tipo de datos que el nombre del autor que es varchar(max)

182
18:13.260 --> 18:16.370
cast(NULL as varchar(max))

183
18:16.590 --> 18:18.920
cast(NULL as varchar(max))

184
18:19.020 --> 18:26.140
como Autor2

185
18:26.270 --> 18:32.920
Así que si ejecutamos esto tenemos una segunda columna en este author2 que simplemente dice NULL.

186
18:32.970 --> 18:39.690
Ahora aquí es donde vamos a tratar de combinar las dos cosas así que voy a cambiar para seleccionar en un

187
18:40.020 --> 18:44.530
seleccionar en la instrucción; y lo llamaremos #TempBooks.

188
18:44.610 --> 18:50.730
Observe que el símbolo hash o el símbolo de hashtag antes del nombre de la tabla.

189
18:50.730 --> 18:55.890
Esto indica que es una tabla temporal y no será visible para ningún otro usuario de esta base de datos

190
18:55.920 --> 18:56.940
fuera de la sesión.

191
18:56.940 --> 19:04.690
Así que es útil para una especie de memoria de trabajo.

192
19:05.730 --> 19:06.180
Lo siento

193
19:13.830 --> 19:14.300
De acuerdo.

194
19:14.520 --> 19:16.050
Siento haber creado eso de nuevo.

195
19:17.270 --> 19:27.680
OK, así que ahora tenemos dos filas en la tabla #TempBooks; para que podamos mirar la tabla de #TempBooks; seleccionar * de 
#TempBooks

196
19:29.710 --> 19:33.520
Las dos filas para libros de un solo autor.

197
19:33.570 --> 19:42.720
Ahora vamos a insertar en; así insertar en #TempBooks seguido de la instrucción select; que ahora podemos ejecutar

198
19:43.190 --> 19:46.890
añadió una fila adicional; ejecutar seleccionar allí;

199
19:46.890 --> 19:50.370
Y tenemos los tres libros.

200
19:50.560 --> 19:56.370
Con Author1, author2. Ahora para demostrar que esto sólo es visible para esta sesión.

201
19:56.370 --> 20:00.990
Podemos crear una nueva consulta aquí; y tratar de ver esto.

202
20:01.020 --> 20:08.070
Así que esto está simulando a otro usuario; y ese usuario no puede ver la tabla #TempBooks.

203
20:08.070 --> 20:15.710
Así que es útil para la memoria de trabajo; algo en lo que solo quieres trabajar; y luego tirar a la basura después.

204
20:16.530 --> 20:18.180
Así que la esperanza que tenía sentido

205
20:21.040 --> 20:29.360
sp_help y sp_helptext;  sp_help y sp_helptext son el sistema

206
20:29.360 --> 20:32.360
instrucciones SQL proporcionadas.

207
20:32.360 --> 20:38.160
Se pueden utilizar para ver el contenido o el esquema de objetos de base de datos como tablas; procedimientos almacenados; Vistas

208
20:38.180 --> 20:43.990
desencadenantes; funciones definidas por el usuario; etc. que podrían utilizarse de la siguiente manera; 

209
20:43.980 --> 20:48.690
sp_help 'mesa'

210
20:52.290 --> 20:59.220
demostración de vídeo. Aquí vamos a demostrar cómo utilizar la interfaz de usuario y el sp_help

211
21:00.070 --> 21:09.810
o sp_helptext comandos para ver: tablas; opiniones; procedimientos almacenados; desencadenantes; y funciones definidas por el usuario.

212
21:09.810 --> 21:16.730
Aquí vamos a demostrar la interfaz de usuario utilizando el sp_help en sp_helptext comandos

213
21:16.740 --> 21:21.720
para ver; tablas; opiniones; procedimientos almacenados; desencadenantes; y funciones definidas por el usuario.

214
21:21.720 --> 21:24.290
Así que vamos a empezar con las mesas.

215
21:24.870 --> 21:29.110
Simplemente navegue a su base de datos.

216
21:29.130 --> 21:30.120
Expanda las tablas.

217
21:30.130 --> 21:31.920
Echemos un vistazo a la tabla de autores.

218
21:31.950 --> 21:41.140
Puede expandir la tabla para ver columnas; llaves y así sucesivamente.

219
21:41.250 --> 21:50.710
O si desea utilizar la línea de comandos que puede utilizar: sp_help autor

220
21:50.750 --> 21:59.210
Esto le dará información sobre, por ejemplo, qué columnas están en la tabla

221
21:59.210 --> 22:00.120
Para hacer lo mismo con una vista:

222
22:00.350 --> 22:05.400
Podemos ampliar las vistas, por ejemplo, los préstamos atrasados.

223
22:05.440 --> 22:14.810
Está la columna de nuestra vista overdueLoans; y si quieres ver el contenido de esto puedes derecho

224
22:14.810 --> 22:24.460
hacer clic y listo; vista de script como; crear en el nuevo editor de consultas y puede ver la instrucción select utilizada para

225
22:24.460 --> 22:28.580
crear esta vista o si lo desea puede ir.

226
22:28.580 --> 22:34.420
sp_helptext préstamos atrasados

227
22:37.720 --> 22:39.920
Ejecutar

228
22:40.150 --> 22:41.650
Esto está en una vista de cuadrícula.

229
22:41.650 --> 22:46.280
En realidad, puede ver esto como texto presionando control y T

230
22:49.010 --> 22:59.750
Eso podría hacer un poco más útil, para volver a la vista de cuadrícula anterior prensa control D ; Ejecutar.

231
23:00.440 --> 23:04.980
Así que es realmente preferencia personal algunos tipos de datos que es más fácil de ver en la cuadrícula y a veces

232
23:04.980 --> 23:07.750
es más fácil de ver como texto.

233
23:08.190 --> 23:19.450
Así que vamos a ver los procedimientos de la tienda; ampliar la capacidad de programación; procedimientos almacenados; Hay withdrawBook.

234
23:19.970 --> 23:30.000
Un acceso directo si no desea volver a escribirlo;  en realidad se puede arrastrar desde el lado, y utilizar sp_helptext

235
23:33.260 --> 23:41.120
para ver el libro de retiro; Los corchetes son bastante irrelevantes en este caso, en realidad sólo 

236
23:41.190 --> 23:48.770
Si tiene un objeto que tiene como un espacio en el medio de él, puede utilizar corchetes para encerrarlo

237
23:49.150 --> 23:54.920
Así que está nuestro procedimiento almacenado withdrawBook.

238
23:55.080 --> 24:00.300
Desencadenadores; Una vez más, vaya a la tabla expandiendo los desencadenadores.

239
24:00.390 --> 24:02.450
Ahí están nuestros gatillos.

240
24:02.690 --> 24:05.120
Podemos eparecerlos usando sp_helptext

241
24:10.230 --> 24:17.230
Esto nos da una idea de lo que está en ese desencadenante en particular; y finalmente funciones definidas por el usuario que

242
24:17.230 --> 24:23.840
están una vez más bajo programabilidad;  Funciones.

243
24:23.840 --> 24:29.380
Y era una función escalar valorada; usamos sp_helptext

244
24:33.490 --> 24:36.980
Para ver esa función definida por el usuario en particular.

245
24:37.870 --> 24:45.180
Así que esa es una vista rápida de cómo puede ver varios objetos de esquema de la base de datos.

246
24:46.190 --> 24:49.880
Usted conseguirá la caída de que muy rápidamente; 

247
24:51.790 --> 24:57.790
Y se acabó para ti; Para este ejercicio me gustaría que escribiera un procedimiento almacenado para manejar un libro que se devuelve.

248
24:57.790 --> 24:59.590
Debe realizar lo siguiente.

249
24:59.890 --> 25:06.340
Crear una transacción; actualizar la columna de devolución de la fecha de la tabla de préstamos contables con la fecha actual.

250
25:07.890 --> 25:15.720
Agregue actualizar la tabla de libros con el ID de estantería suministrado y, finalmente, confirme la transacción

251
25:15.750 --> 25:17.880
Así que pausa este video ahora y dale una gota.

252
25:18.420 --> 25:27.430
Una vez que lo hayas intentado; reanudar el video y ver cómo se sencieron. 

253
25:27.440 --> 25:29.060
Espero que hayas dado un buen ejercicio a este ejercicio antes de buscar la solución.

254
25:29.160 --> 25:30.800
Pero esta es la solución.

255
25:30.860 --> 25:35.660
Por lo tanto, queremos crear un procedimiento almacenado que haga lo contrario de un libro de retirada.

256
25:35.810 --> 25:39.420
Devolverá un libro a la biblioteca.

257
25:39.830 --> 25:41.580
Así que echemos un vistazo a nuestra tabla bookLoans

258
25:45.800 --> 25:59.790
Lo que queremos hacer es actualizar la mesa bookloan.

259
26:00.450 --> 26:00.800
update bookloan set DateReturned - getDate() donde BookID-@BookId

260
26:03.540 --> 26:05.890
update bookloan set DateReturned - getDate() donde BookID-@BookId

261
26:09.210 --> 26:17.650
y luego queremos actualizar la tabla de libros así que mira la mesa de libros.

262
26:19.220 --> 26:25.790
los libros de actualización establecen BookShelfId @BookShelfID donde id-@bookID

263
26:28.070 --> 26:28.960
los libros de actualización establecen BookShelfId @BookShelfID donde id-@bookID

264
26:33.380 --> 26:38.540
los libros de actualización establecen BookShelfId @BookShelfID donde id-@bookID

265
26:41.800 --> 26:47.430
por lo que esto tendrá que ser envuelto en una transacción por lo que sólo vamos a escribir en .

266
26:48.310 --> 26:48.900
Iniciar transacción

267
26:53.120 --> 26:53.990
comprometer la transacción

268
26:58.010 --> 27:06.630
y luego todo está dentro del procedimiento almacenado, así que cree el procedimiento returnBook.

269
27:07.320 --> 27:09.330
Tomará dos parámetros.

270
27:09.410 --> 27:16.030
El @bookID int y el @bookshelfID

271
27:16.280 --> 27:17.350
Que también es un int

272
27:22.070 --> 27:23.860
Como

273
27:23.930 --> 27:30.090
Así que este es el procedimiento de la tienda escrito; Ejecutar

274
27:33.840 --> 27:38.040
Eso debe ser una identificación allí, no bookID

275
27:38.350 --> 27:45.410
Bien, así que vamos a poner esto a prueba; Y vamos a