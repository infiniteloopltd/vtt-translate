WEBVTT

0
00:01.640 --> 00:05.300
Segurança do SQL Server; Dados em uma base de necessidade de saber.

1
00:06.870 --> 00:09.960
Autenticação do Windows versus SQL Server.

2
00:10.200 --> 00:16.560
Os usuários do servidor SQL podem ser autenticados via Microsoft Windows ou via SQL Server diretamente usando um

3
00:16.560 --> 00:18.390
nome de usuário e senha.

4
00:18.390 --> 00:25.080
Normalmente, se o seu cliente; beit management studio ou aplicativo .NET; está na mesma máquina ou local

5
00:25.080 --> 00:32.040
rede como seu servidor de banco de dados você usará a autenticação do Microsoft Windows; se o seu cliente é; ou poderia

6
00:32.040 --> 00:37.740
estar localizado em outro lugar na internet, então você normalmente usaria autenticação SQL Server usando

7
00:37.740 --> 00:38.930
um nome de usuário e senha.

8
00:41.170 --> 00:48.940
Usuários e funções; As funções do servidor SQL definem um nível de acesso ao banco de dados e vários usuários podem

9
00:48.940 --> 00:52.280
ser atribuído a uma função ou múltiplas funções.

10
00:52.460 --> 00:56.420
Existem certas funções definidas pelo sistema que permitem acesso total.

11
00:56.510 --> 00:59.910
Por exemplo, sysadmin ou praticamente sem acesso.

12
00:59.990 --> 01:06.500
Por exemplo, público; você pode definir sua própria função de banco de dados se você precisar de mais acesso granular ao seu banco de dados

13
01:08.600 --> 01:15.480
demonstração de vídeo - Aqui você demonstrará a autenticação do windows e a autenticação do servidor SQL.

14
01:15.620 --> 01:21.890
Também demonstraremos como definir um papel personalizado que permitirá o acesso às informações do livro, mas

15
01:21.890 --> 01:24.370
não informações de estudantes.

16
01:24.380 --> 01:29.000
Aqui demonstrará a autenticação do Windows e a autenticação do SQL Server.

17
01:29.030 --> 01:33.560
Também demonstramos como definir um papel personalizado que permitirá o acesso às informações do livro, mas não

18
01:33.560 --> 01:35.780
informações estudantis.

19
01:35.780 --> 01:40.670
Até agora estamos usando a autenticação do Windows, o que significa que estamos nos autenticando

20
01:40.670 --> 01:45.470
contra o servidor SQL usando o sistema de usuário incorporado do Windows.

21
01:45.470 --> 01:47.050
Isso é muito bom.

22
01:47.060 --> 01:54.140
É seguro, mas se quisermos criar vários logins que têm funções diferentes, então talvez você não

23
01:54.140 --> 01:56.260
querem criar novos usuários do Windows.

24
01:56.300 --> 02:03.260
Toda vez que queremos fazer isso; então vamos primeiro habilitar autenticação de modo misto, o que significa tanto

25
02:03.260 --> 02:12.620
Autenticação do Windows e SQL Server; então para fazê-lo clique com o botão direito do mouse no seu servidor; propriedades de clique;

26
02:12.680 --> 02:20.360
clique em segurança; clique no modo de autenticação do SQL Server e do Windows sob autenticação do servidor.

27
02:20.360 --> 02:26.750
Isso nos permitirá autenticar usando o sistema de usuário do Windows e também usar nomes de usuário e senhas

28
02:26.990 --> 02:28.950
como definido pelo SQL Server.

29
02:29.150 --> 02:36.030
Então pressione OK; agora está pedindo para sql server ser reiniciado o que você pode simplesmente fazer clicando em

30
02:36.030 --> 02:37.250
o servidor.

31
02:37.830 --> 02:45.120
Pressione a reinicialização e pressione sim; ele deve reiniciar rapidamente.

32
02:49.450 --> 02:55.290
E agora podemos usar a autenticação do SQL Server para fazer login, bem como autenticação do Windows.

33
02:55.690 --> 03:05.020
Então, a fim de criar um novo login; primeiro vamos expandir plugins de segurança; clique com o botão direito;  novo login

34
03:05.020 --> 03:10.360
você vai dar-lhe um nome; que eu vou chamá-lo de leitor de livros

35
03:14.450 --> 03:15.710
Autenticação do SQL Server.

36
03:15.710 --> 03:20.430
Nós vamos dar-lhe uma senha que eu vou apenas dar-lhe os números de um a nove.

37
03:20.460 --> 03:22.850
Por favor, dê uma senha muito mais forte do que esta

38
03:27.300 --> 03:31.880
1,2,3,4,5,6,7,8,9.

39
03:31.990 --> 03:33.480
Pressione OK.

40
03:34.160 --> 03:44.290
Agora vou demonstrar como me conectar ao servidor SQL usando este novo usuário para se conectar; e mudar

41
03:44.730 --> 03:50.450
Autenticação do Windows para autenticação do SQL Server o login é bookreader

42
03:53.480 --> 03:59.510
E a senha é 123456789 conecte-se à imprensa.

43
03:59.530 --> 04:03.700
Está pedindo para mudar a senha e eu vou deixá-la para nós 1 a 9

44
04:10.410 --> 04:10.800
pressione OK

45
04:10.830 --> 04:19.080
então agora nós entramos em nosso banco de dados de duas maneiras através da autenticação do windows.

46
04:19.840 --> 04:22.990
e autenticação do servidor SQL.

47
04:23.080 --> 04:31.510
Agora, quando tivermos autenticação do servidor SQL, você notará que isso literalmente não tem acesso ao banco de dados.

48
04:31.510 --> 04:37.590
Isso é porque não designamos o leitor de livros para nenhum papel.

49
04:37.660 --> 04:42.280
Então o que vamos fazer agora é usar a autenticação do Windows.

50
04:42.280 --> 04:45.520
Vamos definir ambos um papel.

51
04:45.520 --> 04:48.160
Vamos criar um novo usuário.

52
04:48.160 --> 04:56.180
Vamos atribuir o usuário a uma função e, em seguida, vamos dar a essa função algumas permissões 

53
04:56.200 --> 04:59.230
ou seja, ler a mesa de livros, mas não a mesa dos alunos.

54
04:59.890 --> 05:09.130
Então vamos começar com a expansão do nosso banco de dados; expandir a segurança; expandir papéis; funções de banco de dados; E

55
05:09.130 --> 05:14.590
devemos criar uma nova função de banco de dados que devemos chamar de papel de bookreader.

56
05:19.200 --> 05:20.190
e pressionar OK

57
05:20.250 --> 05:37.470
vamos criar um usuário; Novo usuário que eu vou chamar de leitor de livros; nome de login deve ser

58
05:37.860 --> 05:38.220
Bookreader

59
05:41.770 --> 05:43.050
e podemos pressionar.

60
05:43.050 --> 05:43.430
Okey.

61
05:45.030 --> 05:55.630
Então agora temos um papel e um usuário; e esse usuário deve ser um membro da função; então nós clicamos em adesão

62
05:56.350 --> 05:59.870
e adicionar o usuário à função.

63
05:59.910 --> 06:05.730
Ainda não demos nenhuma permissão a esta função ou usuário, então eles não terão acesso ao

64
06:05.730 --> 06:07.320
Database.

65
06:07.320 --> 06:14.640
Então, vamos expandir tabelas e vamos clicar com o botão direito nos livros e vamos clicar

66
06:15.090 --> 06:15.660
Propriedades.

67
06:18.180 --> 06:20.330
Permissões.

68
06:20.610 --> 06:24.090
Eu vou procurar o papel de leitor de livros

69
06:29.190 --> 06:30.300
e eu vou...

70
06:30.390 --> 06:36.570
Estas são as várias permissões para que o usuário possa ter; para que eles pudessem excluir a tabela; 

71
06:36.570 --> 06:37.280
inserir na mesa.

72
06:37.470 --> 06:45.020
Mas vamos dizer que nós só queremos pressionar selecionar; para que eles possam ler esta tabela; apenas um acesso tão mínimo.

73
06:45.540 --> 06:48.030
Então vamos pressionar bem aqui.

74
06:48.610 --> 06:57.290
Agora vamos voltar para a segunda conexão que está usando autenticação do servidor SQL e.

75
06:57.300 --> 07:03.630
Crie uma nova janela de consulta usando este usuário.

76
07:03.630 --> 07:08.300
Na barra de títulos você pode ver o nome do usuário que está sendo usado que é bookreader.

77
07:08.550 --> 07:17.250
Então, se eu fizer uma seleção da tabela de alunos primeiro; Eu preciso verificar se eu tenho acesso para ter acesso a

78
07:17.250 --> 07:18.730
a biblioteca.

79
07:18.810 --> 07:21.330
Selecione a biblioteca

80
07:28.100 --> 07:32.910
então eu não tenho acesso à mesa dos alunos, mesmo que ela exista.

81
07:33.240 --> 07:38.390
Mas se eu fizer "selecionar* dos livros" então eu posso ver a mesa de livros.

82
07:38.660 --> 07:45.090
Se eu fosse fazer a mesma coisa usando a autenticação do windows select * dos livros.

83
07:45.560 --> 07:50.090
Selecione o banco de dados correto; para que eu possa ver a tabela de livros

84
07:54.660 --> 08:01.650
Eu também posso ver a mesa dos alunos, mas o leitor de livros não pode ver a mesa dos alunos, mas não pode ver o 

85
08:01.650 --> 08:03.880
mesa de livros.

86
08:04.440 --> 08:06.810
Então esta é uma maneira ideal de criar um sistema.

87
08:06.900 --> 08:10.990
Se você quiser bloquear o acesso particular a clientes específicos.

88
08:11.070 --> 08:20.110
Então, se você tivesse um site que talvez se conectaria a este banco de dados, mas é lido apenas propósitos

89
08:20.160 --> 08:24.120
apenas onde você gostaria de ajudar as pessoas a encontrar livros em uma biblioteca.

90
08:24.120 --> 08:28.800
Então você pode limitar esse acesso à leitura apenas da biblioteca.

91
08:28.800 --> 08:38.670
Portanto, mesmo que seu nome de usuário esteja comprometido ou que o site da Web tenha uma falha de segurança, o SQL Server limitará o

92
08:38.670 --> 08:42.450
danos que essa aplicação em particular pode fazer.

93
08:43.950 --> 08:45.810
Então espero que isso faça sentido, vamos seguir em frente.

94
08:45.930 --> 08:50.760
Protegendo o servidor SQL usando um firewall.

95
08:51.030 --> 08:56.130
Se você tem servidor SQL conectado à internet, então é provável que as partes maliciosas

96
08:56.130 --> 09:00.330
tentar obter acesso a ele tentando adivinhar sua senha.

97
09:00.330 --> 09:05.820
Uma das primeiras linhas de defesa é usar o firewall do Windows para bloquear o Port TCP.

98
09:05.910 --> 09:13.320
1433 para permitir apenas o acesso de endereços IP conhecidos.

99
09:13.330 --> 09:14.730
Demonstração de vídeo.

100
09:14.730 --> 09:20.400
Aqui vai demonstrar como configurar o servidor SQL para controlar o acesso de IPs remotos ou

101
09:20.400 --> 09:24.480
onde é necessário usar um firewall para limitar os IPs que terão acesso a ele.

102
09:26.820 --> 09:32.550
Aqui vamos demonstrar como configurar o SQL Server para controlar o acesso de IPs remotos ou onde ele

103
09:32.550 --> 09:33.360
é necessário.

104
09:33.360 --> 09:36.540
Use um firewall para limitar os IPs que terão acesso a ele.

105
09:37.600 --> 09:43.690
Para obter a melhor segurança, você deve tentar manter seu cliente e seu servidor SQL na mesma máquina e usar

106
09:43.810 --> 09:46.680
conexões locais somente através da autenticação do Windows.

107
09:47.260 --> 09:53.830
No entanto, é bastante provável que uma situação do mundo real terá o servidor SQL em um local diferente

108
09:53.860 --> 09:54.580
para o cliente.

109
09:55.510 --> 10:02.150
Então aqui vamos tentar demonstrar uma conexão local através da Internet.

110
10:03.270 --> 10:10.770
Então, para simular esse tipo de conexão em uma máquina o que precisamos fazer é obter nosso endereço IP local

111
10:11.460 --> 10:22.530
para fazê-lo, abra um comando prompt tipo IPconfig e você notará que terá seu próprio endereço IP local.

112
10:22.530 --> 10:29.430
Isso normalmente terá o formato 192.168 seguido por dois números.

113
10:29.520 --> 10:40.260
No meu caso é 0,147; de modo a demonstrar que atualmente meu servidor local não permitirá conexões

114
10:40.260 --> 10:41.400
através de IPs remotos.

115
10:41.430 --> 10:49.650
Vamos tentar conectar-nos à conta do leitor de livros usando este endereço IP como nome de servidor 

116
10:49.650 --> 10:52.110
então inserimos nossa senha segura novamente.

117
10:52.110 --> 11:02.870
De 1 a 9; 123456789; conectar; e isso vai travar e eventualmente ele vai falhar.

118
11:05.300 --> 11:09.370
Como você pode ver, não está funcionando, então cancele.

119
11:09.380 --> 11:15.900
Agora, quando você verificar 2 coisas, a fim de se certificar de que nosso servidor pode se conectar a partir de IPs remotos.

120
11:15.900 --> 11:25.120
A primeira é que selecionamos propriedades; clique em conexões; e certifique-se de que esta caixa permita conexões remotas

121
11:25.140 --> 11:29.480
o servidor está marcado; o que é perfeito.

122
11:29.970 --> 11:37.590
A próxima coisa que precisamos de mudança é em outro programa chamado configuração sql server management para

123
11:37.590 --> 11:45.250
digitamos o gerenciador de configuração do servidor SQL.

124
11:45.920 --> 11:54.200
Expandimos a rede de servidores SQL; protocolos de configuração para servidor MS SQL; clicamos com o botão direito do mouse no TCP/IP

125
11:54.970 --> 12:06.480
Clique em ativar;  agora precisamos reiniciar nossa reinicialização do servidor SQL local; imprensa sim; permitir que ele reinicie

126
12:11.980 --> 12:16.860
e agora, enquanto tento me conectar usando o endereço IP e a senha

127
12:19.930 --> 12:23.270
agora ele me permite conectar através de um endereço IP.

128
12:23.270 --> 12:28.390
Agora este endereço IP está na minha máquina local, mas pode estar potencialmente em qualquer lugar da Internet.

129
12:29.590 --> 12:35.980
Agora, uma vez que você abrir o seu servidor SQL para a Internet é muito provável que alguém em algum lugar vai

130
12:35.980 --> 12:41.980
descobrir que você tem um servidor SQL ao vivo e vamos tentar arrombá-lo usando senha de força bruta

131
12:42.580 --> 12:44.050
ou algum outro tipo de ataque.

132
12:45.100 --> 12:54.490
Assim, normalmente, seu cliente ou clientes terão endereços IP conhecidos que você pode usar firewall do Windows ou outros

133
12:54.490 --> 13:08.110
produtos de firewall para limitar o acesso a determinados endereços IP para abrir o firewall do Windows; pressionar nova regra;

134
13:08.150 --> 13:13.050
selecionar porta; porque sabemos que a porta é 1433

135
13:13.070 --> 13:18.550
Pressione em seguida; é TCP; Digite 1433.

136
13:19.370 --> 13:22.140
Permitimos a conexão.

137
13:22.310 --> 13:23.870
Próximo.

138
13:23.910 --> 13:25.730
Dê-lhe um nome que é servidor SQL

139
13:28.370 --> 13:29.830
Terminou.

140
13:29.980 --> 13:33.370
Agora, para limitar este clique com o botão direito na nova regra.

141
13:33.380 --> 13:40.090
Propriedades de imprensa; escopo de imprensa; e então você pode escolher

142
13:43.260 --> 13:50.760
um endereço IP remoto; é este endereço IP; pressionar adicionar e, em seguida, podemos digitar o endereço IP de nossa confiança

143
13:50.760 --> 13:52.190
Cliente.

144
13:52.310 --> 14:00.300
Agora, neste exemplo, se o cliente tem um endereço IP de 8.8.8.8 que passa a ser o Google, então o

145
14:01.230 --> 14:05.640
cliente será permitido se estiver em qualquer outro lugar ele será desconectado.

146
14:06.030 --> 14:08.040
Regulamento Geral de Proteção de Dados.

147
14:08.250 --> 14:14.580
GDPR; se você tiver dados pessoalmente identificáveis sobre cidadãos da UE, então você estará sujeito ao GDPR

148
14:14.580 --> 14:18.090
regulação, independentemente de onde você ou sua empresa está sediada.

149
14:19.560 --> 14:25.290
Em traços muito amplos esta lei exige que você; permitem que os usuários excluam seus próprios dados.

150
14:25.290 --> 14:30.890
Permitir que os usuários visualizem ou atualizem seus próprios dados; para manter seus dados seguros e informá-los.

151
14:30.900 --> 14:34.160
Quem mais tem seus dados.

152
14:34.230 --> 14:41.100
Outros países com GDPR - como leis; Outros países aplicam leis semelhantes ao GDPR, como o Brasil

153
14:41.340 --> 14:46.130
Austrália, Califórnia, Japão, Coreia do Sul e Tailândia.

154
14:46.170 --> 14:49.500
Você deve se conscientizar de quaisquer leis que possam se aplicar aos seus dados.

155
14:51.210 --> 14:52.340
Armazenando senhas.

156
14:52.980 --> 14:58.230
Se você armazenar nomes de usuário e senhas em seu banco de dados, você nunca deve armazená-los como texto simples.

157
14:58.290 --> 15:04.800
A maneira mais comum de criptografar senhas é chamada hashing, que é um mecanismo de criptografia de uma maneira.

158
15:04.830 --> 15:12.090
Tudo o que você precisa fazer é verificar se o hash das senhas fornecidas pelo usuário corresponde ao hash no banco de dados

159
15:12.740 --> 15:20.460
e você pode ter certeza que a senha está correta sem armazenar a senha em si 

160
15:20.730 --> 15:27.660
Hashes forte; Existem vários algoritmos de hash diferentes, mas recomenda-se usar SHA2_256 ou SHA2_512

161
15:27.660 --> 15:34.100
Para aumentar a força de um hash,

162
15:34.150 --> 15:40.270
Você pode adicionar uma seqüência arbitrária à senha que está sendo hashed e a mesma string ao usuário fornecido

163
15:40.270 --> 15:41.580
Senha.

164
15:41.590 --> 15:44.520
Isso se chama salgadinho.

165
15:44.680 --> 15:52.270
Você pode usar os hashbytes de comando para executar hashing no servidor SQL, como 

166
15:52.510 --> 15:57.220
selecionar hashbytes ('SHA2_256','esta é a minha senha')

167
15:57.220 --> 15:57.880
selecionar hashbytes ('SHA2_256','esta é a minha senha')

168
15:57.880 --> 16:01.960
selecionar hashbytes ('SHA2_256','esta é a minha senha')

169
16:04.130 --> 16:10.460
Demonstração de vídeo: Aqui vamos demonstrar como armazenar hashes de senha em um banco de dados e como verificar

170
16:10.490 --> 16:12.210
se a senha corresponder.

171
16:12.380 --> 16:16.550
Demonstraremos ainda como aumentar o nível de segurança usando salgadinho.

172
16:17.880 --> 16:23.600
OK aqui vai demonstrar como armazenar hashes de senha em um banco de dados e como verificar se a senha

173
16:23.600 --> 16:30.350
correspondências; demonstrará ainda como aumentar o nível de segurança usando salgadinho.

174
16:30.500 --> 16:37.250
Portanto, certifique-se de que você está logado no banco de dados usando seu usuário de autenticação do windows; em vez de

175
16:37.250 --> 16:43.250
o leitor de livros ou usuário porque o usuário leitor terá muito pouco acesso ao banco de dados para

176
16:43.250 --> 16:45.780
realmente proceder à demonstração.

177
16:45.830 --> 17:00.060
Então, primeiro vamos criar uma tabela de usuário assim; 

178
17:02.810 --> 17:10.040
criar usuários de tabela (identidade id int(1,1) não nulo, nome de usuário varchar(100),

179
17:10.180 --> 17:16.060
Agora, em vez de salvar a senha como um varchar e permitir que qualquer um que tenha acesso ao banco de dados

180
17:16.090 --> 17:23.020
para realmente ler esta senha que vamos armazenar como varbinary eo comprimento do hash sempre

181
17:23.020 --> 17:24.550
ser 256.

182
17:24.610 --> 17:29.670
Se usarmos SHA2_ 256 para que possamos usar varbinary(256).

183
17:31.820 --> 17:34.150
Então crie essa mesa.

184
17:35.320 --> 17:44.430
Agora, ao criar um usuário nesta tabela de usuário, vamos digitar;

185
17:45.420 --> 17:48.370
inserir nos valores dos usuários (nome de usuário,senha) ('

186
17:48.570 --> 17:51.130
O nome de usuário pode ser...

187
17:51.360 --> 17:59.010
John como um nome de usuário e em vez de dar-lhe texto simples como a senha vamos usar hashbytes

188
18:00.510 --> 18:10.510
vamos fornecer um algoritmo que você pode usar SHA2_256 e a senha.

189
18:10.530 --> 18:12.270
Vamos ligar para minha senha.

190
18:15.060 --> 18:15.830
Nwo.

191
18:16.020 --> 18:18.480
Nós corremos sobre isso.

192
18:18.510 --> 18:19.220
Vamos dar uma olhada.

193
18:19.230 --> 18:20.790
Como você usa sua mesa agora.

194
18:25.320 --> 18:31.590
Assim, você pode ver o nome de usuário em texto simples, mas a senha é criptografada.

195
18:31.590 --> 18:32.830
É uma maneira criptografada.

196
18:32.830 --> 18:38.160
Não há como voltar desse longo valor hexálo de volta à palavra.

197
18:38.220 --> 18:39.050
"Minha senha"

198
18:40.030 --> 18:41.640
Mas como vamos realmente usar isso?

199
18:41.640 --> 18:44.240
Bem, nosso login será algo assim:

200
18:44.340 --> 18:52.520
selecionar top 1 * de usuários onde o nome de usuário='john' e

201
18:53.640 --> 18:58.860
password=hashbytes ('SHA2_256','minha senha')

202
18:58.980 --> 19:02.540
password=hashbytes ('SHA2_256','minha senha')

203
19:04.220 --> 19:16.110
Se a mesma senha foi fornecida; "minha senha"; Então 

204
19:16.130 --> 19:22.940
Você pode executar isso; e podemos recuperar nossa ida de usuário.

205
19:22.940 --> 19:31.820
Se a senha errada foi fornecida, então, evidentemente, isso retornará zero linhas, pois não há usuário correspondente.

206
19:33.380 --> 19:41.260
Então isso é uma demonstração rápida de como usar hashing para criptografar uma senha no banco de dados.

207
19:41.540 --> 19:48.860
E isso significa que mesmo um administrador de banco de dados não pode ver as senhas do usuário.

208
19:49.290 --> 19:54.710
Nós demos grandes passos agora para garantir o valor da senha no banco de dados.

209
19:54.840 --> 20:00.760
No entanto, podemos fazer um melhor e tornar este hash ainda mais seguro.

210
20:00.870 --> 20:10.140
Mas antes que eu possa explicar como podemos tornar isso mais seguro eu posso ter que demonstrar como há uma segurança

211
20:10.140 --> 20:12.460
falha no que fizemos até agora.

212
20:12.840 --> 20:23.050
Então, neste exemplo eu vou imaginar que o nosso usuário selecionou uma senha muito, muito insegura um realmente

213
20:23.050 --> 20:28.420
senha óbvia e a mais óbvia que eu posso possivelmente pensar é a palavra "senha" que você deve

214
20:28.420 --> 20:30.360
nunca use como senha.

215
20:30.400 --> 20:37.710
Agora, neste caso, nosso usuário; John selecionou "senha" como senha.

216
20:37.750 --> 20:43.400
Isso dará o valor de hash deste 0x5E....

217
20:43.480 --> 20:44.950
Etc., etc.

218
20:45.160 --> 20:48.100
O que parece ser muito seguro.

219
20:48.250 --> 20:53.280
No entanto, o problema é que este é provavelmente um hash muito bem conhecido.

220
20:53.380 --> 20:56.830
Então, se eu simplesmente google este hash

221
20:59.780 --> 21:05.930
clique no primeiro resultado algo e empilhar transbordamento e alguém está falando sobre isso dizendo se

222
21:05.930 --> 21:10.840
É criptografar a palavra senha blá eu recebo este valor.

223
21:10.850 --> 21:19.070
Portanto, alguém com uma pesquisa rápida no Google ou talvez com ferramentas mais sofisticadas, como arco-íris

224
21:19.070 --> 21:24.830
tabelas poderia quebrar esses hashes muito rapidamente, especialmente se o usuário usa algo muito, muito simples

225
21:24.830 --> 21:26.390
Assim.

226
21:26.710 --> 21:34.520
Agora, a solução para este problema é o que é chamado de sal, onde você adiciona uma cadeia arbitrária conhecida para

227
21:34.520 --> 21:38.600
o fim da senha a ser hashed.

228
21:38.600 --> 21:46.610
Então, neste caso, vamos escolher um longo e complexo

229
21:49.350 --> 21:58.120
Vamos ver que estou apenas apertando botões aleatórios aqui em cima, mas eu vou lembrar disso para mais tarde; nós executamos isso e

230
21:58.120 --> 21:59.200
temos um hash diferente

231
22:02.660 --> 22:08.420
se eu google este hash, então não haverá resultados porque é adequadamente forte.

232
22:09.740 --> 22:20.420
Portanto, se adicionarmos esta seqüência aleatória que é chamada de sal à senha e também adicioná-lo ao

233
22:21.660 --> 22:28.350
script de login, então vamos criar "John2"

234
22:32.100 --> 22:38.130
então inserir usuários John2 deve ir aqui.

235
22:38.260 --> 22:51.210
Se eu agora usar essa senha John2 é devolvido, mesmo que John2 tenha usado uma senha muito insegura

236
22:51.810 --> 22:53.660
ele ainda vai passar neste teste.

237
22:54.450 --> 22:57.010
Então espero que isso faça sentido e vamos seguir em frente.

238
22:59.460 --> 23:05.340
Injeção de servidor SQL; se o seu servidor SQL estiver conectado a um aplicativo que aceita a entrada do usuário

239
23:05.670 --> 23:10.710
você deve estar ciente de que esta entrada pode conter instruções SQL maliciosas.

240
23:10.830 --> 23:15.570
Por exemplo, se você tem um comando SQL, mas está escrito como tal.

241
23:15.750 --> 23:21.660
selecionar * de livros onde nome='[alguma entrada do usuário]'

242
23:21.660 --> 23:26.880
Então talvez você não espere que a entrada do usuário seja 

243
23:26.890 --> 23:31.560
'; deixar livros de mesa; --

244
23:31.680 --> 23:35.120
Você deve remover ou escapar apóstrofes da entrada do usuário

245
23:38.620 --> 23:41.820
criptografia de dados transparente (TDE).

246
23:43.150 --> 23:48.520
Você pode ter acesso ao seu banco de dados bloqueado, mas se um usuário não autorizado tiver acesso físico a

247
23:48.520 --> 23:56.730
seu servidor, então, eles poderiam potencialmente analisar o arquivo MDF para extrair informações confidenciais.

248
23:56.870 --> 24:06.600
A Criptografia TDE protege seu MDF subjacente contra esse tipo de acesso não autorizado.

249
24:06.600 --> 24:13.380
Aqui vamos demonstrar como aplicar o TDE ao seu banco de dados de servidor SQL.

250
24:13.410 --> 24:15.370
Aqui vamos demonstrar como aplicar.

251
24:15.420 --> 24:18.660
TDE para o seu banco de dados SQL Server.

252
24:18.660 --> 24:31.560
Então, para começar, você precisa ter certeza de que você está no banco de dados mestre; assim; usar mestre.

253
24:32.370 --> 24:40.990
Agora você precisa criar uma chave mestra para que o comando seja;

254
24:46.090 --> 24:52.150
CRIAR CRIPTOGRAFIA DE CHAVE MESTRE
POR SENHA:'123456789';

255
24:52.370 --> 24:53.430
CRIAR CRIPTOGRAFIA DE CHAVE MESTRE
POR SENHA:'123456789';

256
24:53.690 --> 25:03.810
Vou usar de 1 a 9, o que não é muito forte, mas vai funcionar.

257
25:03.870 --> 25:07.340
Deveríamos fazer isso agora.

258
25:07.650 --> 25:09.530
Precisamos criar um certificado.

259
25:11.980 --> 25:15.910
CRIAR TDE_CERTIFICATE DE CERTIFICADO
Com 
SUBJECT='Certificado para TDE';

260
25:19.240 --> 25:23.170
CRIAR TDE_CERTIFICATE DE CERTIFICADO
Com 
SUBJECT='Certificado para TDE';

261
25:24.260 --> 25:25.120
CRIAR TDE_CERTIFICATE DE CERTIFICADO
Com 
SUBJECT='Certificado para TDE';

262
25:29.000 --> 25:32.310
CRIAR TDE_CERTIFICATE DE CERTIFICADO
Com 
SUBJECT='Certificado para TDE';

263
25:33.690 --> 25:38.800
Este será um certificado auto-assinado pelo banco de dados.

264
25:43.700 --> 25:50.070
Agora, selecionamos o banco de dados que desejamos criptografar; que é o banco de dados da biblioteca.

265
25:50.080 --> 25:59.100
Então use biblioteca; e o próximo passo é criar uma chave de criptografia de banco de dados que devemos ter certeza de que estamos

266
25:59.100 --> 26:01.230
no banco de dados da biblioteca

267
26:04.540 --> 26:11.250
e nós digitamos:

268
26:16.870 --> 26:21.550
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

269
26:24.190 --> 26:26.710
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

270
26:26.710 --> 26:28.600
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

271
26:28.600 --> 26:34.510
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

272
26:34.790 --> 26:35.330
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

273
26:38.710 --> 26:41.800
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

274
26:44.870 --> 26:51.170
CRIAR CHAVE DE CRIPTOGRAFIA DE BANCO DE DADOS
COM ALGORITMO = AES_256
CRIPTOGRAFIA POR TDE_CERTIFICATE DE CERTIFICADO DE SERVIDOR;

275
26:54.070 --> 26:59.990
Me deu um aviso dizendo que você deve sempre fazer backup da sua chave de criptografia de banco de dados.

276
27:00.060 --> 27:03.890
Isso é muito importante, porque se você perdê-lo; então você vai perder o acesso ao seu banco de dados

277
27:06.510 --> 27:07.090
E...

278
27:07.120 --> 27:17.980
Então, finalmente, vamos digitar;

279
27:18.160 --> 27:18.420
ALTERAR BIBLIOTECA DE BANCO DE DADOS
CONFIGURAR CRIPTOGRAFIA;

280
27:23.170 --> 27:27.530
e executar.

281
27:27.820 --> 27:32.860
Isso retornará imediatamente, embora possa levar alguns segundos para a criptografia realmente passar

282
27:32.860 --> 27:37.200
seu banco de dados.

283
27:37.210 --> 27:43.160
Agora, o aviso que apareceu anteriormente dizendo que você deve fazer backup de sua chave de criptografia se você fizer isso.

284
27:43.210 --> 27:46.540
Então vamos digitar:

285
27:53.090 --> 27:58.940
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

286
28:03.380 --> 28:06.050
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

287
28:13.250 --> 28:23.630
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

288
28:23.660 --> 28:24.110
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

289
28:28.910 --> 28:30.470
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

290
28:37.450 --> 28:43.410
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

291
28:43.410 --> 28:43.760
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

292
28:46.970 --> 28:50.160
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

293
28:55.750 --> 28:57.030
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

294
29:05.310 --> 29:08.700
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

295
29:08.700 --> 29:09.270
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

296
29:09.350 --> 29:09.900
TDE_CERTIFICATE DE CERTIFICADO DE BACKUP
PARA ARQUIVAR = 'C:\temp\TDE_Certificate.cer'
COM CHAVE PRIVADA (arquivo='C:\temp\TDE_Certificate.pvk',
CRIPTOGRAFIA POR SENHA='123456789') 

297
29:09.900 --> 29:23.490
Execute isso e esperamos que tenhamos nossos backups em nossa pasta C:\temp.

298
29:27.660 --> 29:28.390
Aí vamos nós.

299
29:28.400 --> 29:31.700
Estes são nossos backups; o CER e o PVK.

300
29:31.700 --> 29:36.620
Você deve mantê-los seguros, porque se você perder estes; então você vai perder o acesso ao seu banco de dados

301
29:39.490 --> 29:48.120
OK, então isso é criptografia TDE; e mantém seus dados a salvo de qualquer um que possa ter acesso físico

302
29:48.120 --> 29:48.690
para o seu servidor

303
29:52.580 --> 29:56.580
E para você; se o usuário esquecer suas senhas -

304
29:56.810 --> 29:58.880
E está em seu banco de dados.

305
29:58.880 --> 30:02.490
Você não pode recuperá-lo deles, mas você pode redefini-lo.

306
30:02.690 --> 30:10.490
Portanto, escreva um procedimento armazenado para redefinir uma senha hashed usando o mesmo sal de antes; 

307
30:10.490 --> 30:13.730
Você pode pausar este vídeo agora e retomá-lo quando quiser ver a solução.

308
30:15.960 --> 30:16.310
Okey.

309
30:16.340 --> 30:18.000
Então, aqui está a solução.

310
30:18.140 --> 30:24.200
Queríamos que você escrevesse um procedimento armazenado para redefinir uma senha de hash usando o mesmo sal de antes.

311
30:24.200 --> 30:27.110
Agora, a coisa sobre hashing é que é uma criptografia de uma maneira.

312
30:27.110 --> 30:34.670
Não há como reverter a criptografia para determinar o texto original da cifra

313
30:34.670 --> 30:35.170
Texto.

314
30:35.780 --> 30:38.780
No entanto, você pode comparar textos cifrados.

315
30:38.880 --> 30:46.020
Assim, no caso de um usuário que esqueceu sua senha e precisa redefini-la com uma nova senha.

316
30:46.020 --> 30:48.330
Agora, eu não sei o que fazer precisamos substituir a senha antiga.

317
30:49.070 --> 30:53.310
Então vamos começar

318
30:55.230 --> 30:59.440
criar procedimento sp_resetPassword (

319
30:59.560 --> 31:01.720
Isso levará parâmetros; o nome de usuário

320
31:06.090 --> 31:13.510
que deve ser um varchar(100) correspondendo ao valor máximo da tabela; varchar(100) e

321
31:13.740 --> 31:14.270
Senha

322
31:16.880 --> 31:26.140
que vamos varchar(100) também; 100 caracteres é bastante generoso para uma senha.

323
31:26.360 --> 31:40.760
usuários de atualização definem senha=hashbytes ('SHA2_256',@password + 

324
31:41.370 --> 31:46.760
E você quer substituir isso com o passado em parâmetro

325
31:46.760 --> 31:49.170
Este foi o sal que usamos antes.

326
31:49.610 --> 32:02.840
É um pouco de um texto aleatório; mas forte é bom; onde nome de usuário=@username.

327
32:03.880 --> 32:08.200
Ok, então vamos colocar isso à prova; e vamos dar uma olhada em nossa tabela de usuários

328
32:18.000 --> 32:21.700
Ah, não! certifique-se de que você está no banco de dados certo

329
32:24.310 --> 32:26.410
então olhe para a nossa tabela de usuários.

330
32:26.410 --> 32:29.110
Então temos esse John e John2.

331
32:29.190 --> 32:38.200
Vamos imaginar que queremos redefinir a senha do John para sp_resetPassword 'john',.......

332
32:38.260 --> 32:42.900
que é chamado de "Deixe-me entrar" e também é uma senha muito ruim.

333
32:43.380 --> 32:45.500
Certo.

334
32:45.640 --> 32:54.960
Então, mais uma vez está criptografado, mas vamos verificar se podemos entrar usando isso.

335
32:55.750 --> 32:56.550
"Deixe-me entrar"

336
32:56.810 --> 33:03.440
Então este é mais uma vez o nosso script para ver se podemos fazer login; e isso retorna "John".

337
33:04.310 --> 33:04.720
Okey.

338
33:04.780 --> 33:06.590
Espero que possamos seguir em frente.
