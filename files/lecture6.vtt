WEBVTT

0
00:01.390 --> 00:03.370
Transactions and triggers.

1
00:03.370 --> 00:04.950
Keeping your data consistent.

2
00:06.690 --> 00:07.610
Transactions.

3
00:07.800 --> 00:13.050
Transactions are SQL's way of enforcing an all or nothing approach to changing your data.

4
00:13.050 --> 00:18.480
They offer a way to rollback or undo an operation in case of an error or failure.

5
00:20.500 --> 00:26.050
The classic example is if you were a bank and you're executing in cash transfer between two accounts

6
00:26.350 --> 00:30.520
but there's the risk of a sudden power outage that would crash your systems.

7
00:30.520 --> 00:35.440
Knowing your luck the Power Outage would happen just in that instant between debiting the source

8
00:35.440 --> 00:38.350
account and crediting the destination account.

9
00:38.470 --> 00:44.020
In this case you prefer to roll back the cash transfer so that it could be re attempted rather than

10
00:44.020 --> 00:46.080
having the money lost.

11
00:46.270 --> 00:48.720
Transactions Act as a safety net for this purpose.

12
00:51.330 --> 00:53.540
Implicit transactions.

13
00:53.540 --> 00:59.270
Every single statement operation in SQL is implicitly wrapped in a transaction.

14
00:59.270 --> 01:05.210
This means that if you were to run a large update and halfway through the operation the server crashed.

15
01:05.210 --> 01:09.380
Once you restored power it would appear as if the update was never run at all.

16
01:09.410 --> 01:11.480
Rather than seeing a half completed Operation

17
01:14.350 --> 01:20.940
Video demonstration; Here add a new row to the bookshelf table indicating a state where the book is

18
01:20.940 --> 01:26.210
withdrawn and not in the library; when adding a row to the book loan table.

19
01:26.220 --> 01:31.530
We will also update the books table to indicate that the book is no longer in the library.

20
01:31.650 --> 01:38.180
We will use transactions to protect against two eventualities; a connection failure in mid-operation

21
01:39.230 --> 01:43.570
or an error where an invalid date was used in the insert statement.

22
01:46.470 --> 01:52.320
OK; so here we're going to demonstrate transactions and their all or nothing approach to changing data

23
01:52.380 --> 01:54.720
within the database.

24
01:54.990 --> 02:02.040
We're going to add a new row into the bookshelf table indicating a state called withdrawn which indicates

25
02:02.340 --> 02:04.760
that the book is no longer in the library.

26
02:04.830 --> 02:06.810
So let's do that first.

27
02:06.810 --> 02:13.390
Select * from bookshelf.

28
02:13.630 --> 02:17.950
We only have one shelf in the database at the moment; so we're gonna add a new one; 

29
02:17.950 --> 02:25.330
insert into BookShelf (Location) values ('Withdrawn')

30
02:31.810 --> 02:32.620
Lets look at our bookshelf again.

31
02:33.990 --> 02:40.190
Okay so I have an ID of 7 for Withdrawn; in your case -

32
02:40.360 --> 02:42.530
It's probably going to be two or a different.

33
02:42.530 --> 02:43.110
Number

34
02:43.490 --> 02:45.100
So it's seven for me.

35
02:45.100 --> 02:48.360
So bear that in mind.

36
02:48.670 --> 02:53.230
Now we're going to next make our books table consistent with this new state.

37
02:53.440 --> 02:57.920
So we look at our outstanding loans.

38
02:57.920 --> 03:00.880
Bookloan

39
03:00.910 --> 03:03.000
We have one outstanding loan for book id 1

40
03:03.010 --> 03:06.010
Lets look at our books table

41
03:13.990 --> 03:14.680
okay.

42
03:14.730 --> 03:24.200
And we're going to update book id 1 with bookshelf id 7 so ;

43
03:24.210 --> 03:31.550
update books set BookShelfId=7 where id=1

44
03:32.250 --> 03:33.980
Now to make this a little clearer.

45
03:33.980 --> 03:40.160
We're going to do a join on the bookshelf table; 

46
03:40.260 --> 03:41.550
join bookShelf bs on bs.id = b.bookShelfId

47
03:42.170 --> 03:44.710
join bookShelf bs on bs.id = b.bookShelfId

48
03:47.500 --> 03:53.770
OK so in this state we can see that of the three books in our library one is withdrawn and two are on

49
03:53.770 --> 03:55.000
the shelf beside the window.

50
03:56.470 --> 04:06.210
So here we're going to demonstrate how to do a transaction where we're going to execute a new loan which

51
04:06.210 --> 04:13.800
will involve two operations; one inserting into the book loan table and two; updating the books table

52
04:13.800 --> 04:15.840
to say that the location is now withdrawn.

53
04:16.290 --> 04:16.710
So

54
04:20.740 --> 04:22.590
we typically work as follows.

55
04:22.590 --> 04:23.520
We are going to update

56
04:26.550 --> 04:36.370
update books set bookShelfId=7 where id=1

57
04:37.440 --> 04:40.050
And we want to;

58
04:42.840 --> 04:47.130
insert into bookloan ..

59
04:53.570 --> 04:56.530
let's look at the bookloan table for a second

60
04:59.800 --> 05:02.980
insert into bookloan(StudentId, BookId, DateWithdrawn, DateDue ) values (

61
05:03.450 --> 05:04.650
insert into bookloan(StudentId, BookId, DateWithdrawn, DateDue ) values (

62
05:06.570 --> 05:11.080
Let's imagine it's student I.D. 3; same person.

63
05:11.260 --> 05:13.590
Book ID 2

64
05:19.120 --> 05:28.390
date withdrawn 

65
05:28.850 --> 05:30.770
and datedue back

66
05:33.920 --> 05:38.260
In order to carry out a withdrawal it would be a matter of running these two operations.

67
05:38.270 --> 05:41.050
We update the books tables; so the bookshelf ID equals two.

68
05:41.150 --> 05:44.420
Then we insert into the book loan table.

69
05:44.600 --> 05:53.270
Now what would happen in this situation where if we were to do something drastic here; that there was

70
05:53.270 --> 06:05.430
a power cut; just at that moment between the update and the insert; In this circumstance this would mean

71
06:05.940 --> 06:08.160
that the books table gets updated.

72
06:08.520 --> 06:10.620
So the book gets set to withdrawn

73
06:11.160 --> 06:16.310
However there would be no corresponding book insert into the book loan table.

74
06:16.560 --> 06:21.570
This would be a big problem because it means that we could no longer tell where that book was because

75
06:22.080 --> 06:26.880
it says it's withdrawn but there will be no corresponding book loan; and effectively that book would be

76
06:26.880 --> 06:27.540
lost.

77
06:28.770 --> 06:30.830
This is where transactions come in

78
06:33.780 --> 06:36.620
So you type "begin transaction"

79
06:43.760 --> 06:47.410
as the transaction starts; and commit transaction

80
06:51.740 --> 06:53.300
as the transaction ends

81
06:57.580 --> 06:59.580
in order to demonstrate this.

82
06:59.680 --> 07:06.420
What I'm going to do is after the instant of the power cut, I'm going to comment out these two lines

83
07:09.980 --> 07:13.860
to say that nothing operates after the power cut happens.

84
07:13.880 --> 07:21.360
The database is dead; so I execute this; it says one row is affected.

85
07:22.110 --> 07:26.820
But let's reset our database and see what happens with the books table.

86
07:34.400 --> 07:41.180
So this is our database effectively being turned off and turned back on again as if it were a power

87
07:41.200 --> 07:46.490
cut; we will open a new query and let's have a look at our book table

88
07:52.400 --> 07:54.660
sorry in the database, Library.

89
07:57.020 --> 08:02.610
And now as you can see even though I executed this SQL statement.

90
08:02.610 --> 08:06.270
Update books set bookshelfID =   7 where ID = 2.

91
08:08.100 --> 08:13.500
This has not been changed; so effectively means that this transaction was not committed so therefore

92
08:13.650 --> 08:15.710
it was not carried out.

93
08:18.880 --> 08:27.050
Now in a normal circumstance where there is no power cut; we shall comment out the power cut indicator ..

94
08:27.070 --> 08:30.360
uncomment those two lines and run this transaction again.

95
08:32.360 --> 08:34.160
Two rows are affected.

96
08:34.160 --> 08:39.510
Let's have a look at our books table; the books table indicates that two books are withdrawn.

97
08:40.940 --> 08:44.120
On the book loan table indicates that two books are withdrawn.

98
08:44.150 --> 08:47.100
So we're perfectly consistent.

99
08:47.210 --> 08:53.000
Now you may be thinking to yourself it's very unlikely that a power cut would happen in the instant

100
08:53.030 --> 09:03.250
between these two statements. So let's simulate a much more likely circumstance where we're going to

101
09:03.250 --> 09:11.650
say that there is a problem with the user code so therefore somebody is trying to withdraw a book on

102
09:11.650 --> 09:15.660
the 31st of February which is not a date.

103
09:16.200 --> 09:24.820
Now we shall also change the book ID  to Book ID 3 for demonstration purposes.

104
09:24.820 --> 09:31.320
Book ID 3;  Select * from books

105
09:34.840 --> 09:36.440
It's Book ID 3.

106
09:36.520 --> 09:36.790
Okay.

107
09:36.820 --> 09:41.330
So in this circumstance we're going to run the transaction.

108
09:41.360 --> 09:48.400
Now bear in mind that without this transaction this statement would run;

109
09:48.420 --> 09:52.150
update books set BookShelfId=6 where Id=3

110
09:52.250 --> 10:00.320
This would withdraw the third book however the insert into to book loan table would fail because there

111
10:00.320 --> 10:02.430
is no date the 31st of February.

112
10:02.750 --> 10:08.990
So this statement would fail; leaving the database in an inconsistent state because the books

113
10:08.990 --> 10:13.460
table would say the book was withdrawn whereas the bookloan would say otherwise.

114
10:14.440 --> 10:16.200
However within a transaction.

115
10:16.250 --> 10:19.170
Let's see what happens; execute.

116
10:20.020 --> 10:26.380
So as expected there's an error message here saying conversion failed when converting date and or time

117
10:26.410 --> 10:28.150
from character string.

118
10:28.180 --> 10:34.900
This is as expected; 31st of February does not exist so therefore just fail to insert.

119
10:35.020 --> 10:40.030
However the very important thing here is that the books table has not been updated.

120
10:40.730 --> 10:46.860
We run this and we can see that the location is still set to 1.

121
10:46.870 --> 10:51.090
This is how transactions keep your database in a consistent state.

122
10:53.190 --> 11:00.270
Triggers; triggers are SQL statements that will execute in response to changes in data that can be

123
11:00.270 --> 11:06.510
used to ensure that a change in one table triggers a change in another table triggers can be executed

124
11:06.510 --> 11:09.810
in response to insert update or delete statements

125
11:12.450 --> 11:13.970
video demonstration.

126
11:14.400 --> 11:20.070
Here follows a demonstration where we shall create a table called bookchanges which will record updates

127
11:20.070 --> 11:28.110
to the books table through the use of triggers. An insert trigger to record new books being added to the library

128
11:28.920 --> 11:35.910
an update trigger to record changes to existing books and a delete trigger to record books being removed

129
11:35.910 --> 11:36.570
from the library.

130
11:39.440 --> 11:46.660
Here we're going to demonstrate triggers; where we're going to create a table called bookchanges and

131
11:46.700 --> 11:55.480
this table will record updates to the book table through the use of triggers; so let's first create the

132
11:55.480 --> 12:00.760
bookchanges table.

133
12:04.160 --> 12:14.270
create table BookChanges ( id int identity(1,1) not null,

134
12:14.290 --> 12:22.340
This will also record the book ID, which will be an int , The change Type which will be varchar(max)

135
12:23.900 --> 12:28.050
and will also take a note of the date and time.

136
12:28.120 --> 12:30.730
This has actually happened; so we'll call it dateOccurred

137
12:34.100 --> 12:40.400
We can of course include the date in every insert into this bookChanges table but here's a shortcut

138
12:40.580 --> 12:44.050
where we can type in : datetime default getdate()

139
12:44.050 --> 12:50.530
that means if that a dateoccurred is not supplied in the insert statement.

140
12:50.530 --> 12:55.500
The default value getdate() which is the current date and time will be inserted.

141
12:55.990 --> 12:59.560
So we shall create the bookchanges table.

142
13:01.040 --> 13:04.580
Let's have a look at the bookchanges table; which will be currently empty.

143
13:10.100 --> 13:11.630
Empty.

144
13:11.660 --> 13:15.620
Now let's create a trigger; create trigger

145
13:18.960 --> 13:22.740
and we shall now use the name for the trigger.

146
13:22.860 --> 13:25.860
So call it trgBookInsert

147
13:26.250 --> 13:26.850
So call it trgBookInsert

148
13:30.660 --> 13:49.740
on Books after insert as

149
13:49.910 --> 13:52.480
insert into BookChanges (BookId, ChangeType) 

150
13:56.130 --> 14:05.080
now; this trigger will have access to a virtual table called inserted which will be the insert from the

151
14:05.080 --> 14:06.880
previous statement.

152
14:07.280 --> 14:08.850
Which case I can use.

153
14:08.920 --> 14:21.260
select id, 'Inserted' from INSERTED

154
14:21.740 --> 14:24.190
I can now create this trigger as follows.

155
14:28.190 --> 14:36.150
Now if we now try to insert into the books table then this trigger will be triggered.

156
14:36.510 --> 14:37.950
So let's have a look at our books table.

157
14:45.240 --> 14:48.560
Okay now let's add another Harry Potter book.

158
14:51.780 --> 14:59.940
insert into Books ( BookName, Pages, BookShelfId) values ('

159
15:01.310 --> 15:10.210
'Harry Potter to the Philosopher''s Stone'

160
15:18.760 --> 15:25.090
In order to pass an apostrophe, I've had to pass a double apostrophe, this is how you escape apostrophes in SQL Server

161
15:26.150 --> 15:31.320
I think there's something like 607 pages, bookshelf ID 1

162
15:35.490 --> 15:41.690
I insert into the books table and notice that the two rows have now been inserted.

163
15:42.540 --> 15:45.200
So let's have a look at our books table.

164
15:45.250 --> 15:47.010
We see the Philosopher's Stone.

165
15:48.760 --> 15:50.920
Let's also have a look at the bookchanges table.

166
15:55.530 --> 16:02.250
SELECT * from bookchanges ; and we can see the book ID 7 has been inserted at this time.

167
16:03.660 --> 16:04.000
Okay.

168
16:06.250 --> 16:12.510
So that's an insert trigger.

169
16:12.580 --> 16:21.670
So the next step is demonstrating a delete trigger; where we shall record the action of a book being deleted.

170
16:21.670 --> 16:25.240
Let's look at our books table again.

171
16:25.550 --> 16:28.960
Let's imagine we want to delete book number 7.

172
16:30.500 --> 16:32.270
So it's you creating a trigger.

173
16:32.330 --> 16:45.120
So let's copy this trigger; so we change;  we shall call the trigger a trgBookDelete after delete

174
16:45.120 --> 16:45.870
The state will be deleted.

175
16:49.370 --> 16:51.260
And the virtual table is called deleted

176
16:54.370 --> 17:01.440
so that create this trigger; now look at our books table again.

177
17:01.940 --> 17:03.880
And we're going to delete this book.

178
17:03.930 --> 17:04.650
Delete from books where id=7

179
17:07.420 --> 17:08.710
Delete from books where id=7

180
17:09.570 --> 17:18.640
We run this statement, and we can see the two rows have been affected.

181
17:18.680 --> 17:25.670
One row being the book being deleted and the second row being the row being inserted into the bookchanges

182
17:25.670 --> 17:26.680
table.

183
17:26.810 --> 17:30.920
Let's have a look at our bookChanges table. Select * from bookChanges

184
17:34.390 --> 17:39.310
and we can now see that book ID 7 has now been deleted at this time

185
17:42.840 --> 17:47.250
the third and final type of trigger is the updated trigger.

186
17:47.370 --> 17:51.840
This will be fired when a row is updated.

187
17:51.840 --> 17:54.240
So let's demonstrate this once again.

188
17:54.340 --> 18:07.620
so we shall copy this code and we shall call it 
trgBookUpdate on Books after update; the change type will

189
18:07.620 --> 18:19.230
be "update" and the virtual table will be inserted; we shall create this trigger.

190
18:19.490 --> 18:21.800
Now let's have a look at our books table again.

191
18:26.680 --> 18:33.880
Now let's imagine we want to change the page number of tiny pretty things to 437 instead of 

192
18:33.950 --> 18:34.720
438

193
18:35.860 --> 18:47.950
So; update books set pages=437 where ID=3  ; and run the statement; two rows are affected

194
18:48.240 --> 18:54.460
one being the update on the books table and one being the insert into the book changes table.

195
18:54.480 --> 18:56.320
Let's take a look at our bookschanges table now.

196
19:02.010 --> 19:07.960
there we go; We've now got a third row in the changes table indicating a book has been updated

197
19:11.330 --> 19:20.920
"instead of" triggers;  triggers can operate in two ways either "after" or "instead of";  "after" allows the statement

198
19:20.920 --> 19:28.560
to run and then will execute the trigger; "instead of" prevents the statement from running but executes the trigger 

199
19:28.560 --> 19:37.400
video demonstration;  Here we will demonstrate an "instead of" trigger.

200
19:37.400 --> 19:42.680
We will use an "instead of"  delete trigger to prevent rows being deleted from the bookChanges table

201
19:43.200 --> 19:46.190
and display a warning instead.

202
19:46.970 --> 19:53.270
Okay here we'll demonstrate and instead of delete trigger which will prevent rows from being deleted

203
19:53.270 --> 19:56.030
from the bookchanges table and display a warning instead.

204
19:56.660 --> 19:59.360
So let's create a trigger.

205
19:59.740 --> 20:06.200
Create trigger trgPreventDelete on bookChanges

206
20:09.060 --> 20:09.940
Create trigger trgPreventDelete on bookChanges

207
20:13.050 --> 20:24.080
Instead of delete as;  in this case I'm just going to print a warning and take no further action.

208
20:24.200 --> 20:27.560
So I could use; 

209
20:28.050 --> 20:28.400
print 'Warning: you are not allowed to delete from the book changes table'

210
20:31.250 --> 20:41.550
this particular print message will only be visible

211
20:41.550 --> 20:43.710
to direct users of the database.

212
20:46.460 --> 20:49.140
So that's our trigger created.

213
20:49.140 --> 20:51.480
So let's have a look at bookchanges table.

214
21:00.360 --> 21:00.780
Okay.

215
21:00.880 --> 21:02.440
We have three rows.

216
21:02.650 --> 21:10.810
Now let's try and delete; delete from book changes where id = 1.

217
21:14.410 --> 21:19.030
Now we see a warning saying you're not allowed to delete from the book changes table.

218
21:19.960 --> 21:21.660
Let's look at your book Changes table.

219
21:27.170 --> 21:29.220
All three rows are still there.

220
21:29.220 --> 21:35.480
The same applies for deleting everything in the table still says a warning.

221
21:35.720 --> 21:37.280
The rows are still there.

222
21:37.280 --> 21:39.320
So that's an instead of trigger.

223
21:39.380 --> 21:46.160
So this means that the trigger ran instead of the statement after a trigger would happen after the statement is run.

224
21:46.160 --> 21:50.730
And now it's over to you.

225
21:50.880 --> 21:56.690
Your objective is to create a trigger that prevents users updating the book changes table.

226
21:57.450 --> 21:59.360
So you may post this video on her.

227
21:59.730 --> 22:01.980
Give this a go and resume the video.

228
22:01.980 --> 22:03.510
Once you've tried this exercise

229
22:06.550 --> 22:06.970
okay.

230
22:06.990 --> 22:09.670
So I hope you've given this exercise a go.

231
22:09.730 --> 22:14.050
If you haven't done polls this video now and resume it when you've tried it.

232
22:15.840 --> 22:22.140
So our objective is to create a trigger that prevents user updating the book changes table; in the previous

233
22:22.740 --> 22:29.550
demonstration we demonstrated how to prevent deletes but of course it was possible for somebody to update

234
22:29.580 --> 22:36.230
the table and change the change type or the date in which it happened or so forth.

235
22:36.230 --> 22:38.260
So therefore we're going to create another trigger.

236
22:38.360 --> 22:44.090
So call it; create trigger trgPreventUpdate 

237
22:46.670 --> 22:50.730
on bookChanges

238
22:50.840 --> 22:51.220
Just

239
22:54.480 --> 23:09.850
instead of update as print 'warning you are not allowed to take the book changes table.'

240
23:09.990 --> 23:13.940
Let's create that trigger.

241
23:15.610 --> 23:17.580
Let's look at our changes table

242
23:22.280 --> 23:22.620
now.

243
23:22.990 --> 23:33.110
Let's try and modify the change type so; 

244
23:33.490 --> 23:42.300
update bookChanges set ChangeType = 'whatever' where ID = 1

245
23:43.390 --> 23:44.130
I run this.

246
23:45.400 --> 23:46.540
It's given me a warning.

247
23:46.540 --> 23:52.030
You're not allowed to update book changes table and if I look at the book changes table my update has

248
23:52.030 --> 23:52.750
not been run.

249
23:53.380 --> 23:56.860
So that's so to solve that little problem and I hope you solved it.