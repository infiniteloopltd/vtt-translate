WEBVTT

0
00:01.980 --> 00:11.750
Procedimentos armazenados e funções definidas pelo usuário; fazendo operações complexas simples; Procedimentos armazenados

1
00:11.750 --> 00:18.800
Os procedimentos armazenados fornecem uma maneira de encerrar operações complexas de banco de dados em uma declaração de linha reutilizável.

2
00:18.800 --> 00:26.090
Dessa forma, torna o banco de dados mais fácil de operar e realmente melhora o desempenho; para criar um

3
00:26.300 --> 00:28.380
use o seguinte formato.

4
00:28.430 --> 00:36.690
Criar procedimento, em seguida, o nome do procedimento "@" o nome da variável, o tipo de dados, qualquer outro

5
00:36.690 --> 00:43.380
variáveis como, e, em seguida, sua declaração SQL.

6
00:43.900 --> 00:50.080
Demonstração de vídeo; aqui vamos demonstrar um procedimento armazenado que será chamado quando um livro é emprestado

7
00:50.250 --> 00:50.980
da biblioteca.

8
00:52.720 --> 00:58.280
Aceitamos dois parâmetros da carteira de estudante e a id do livro. 

9
00:58.280 --> 00:58.980
No procedimento armazenado

10
00:59.060 --> 01:02.080
Realizaremos as seguintes operações.

11
01:02.540 --> 01:06.890
Criar uma transação; adicionar um empréstimo à tabela de empréstimo do livro.

12
01:06.890 --> 01:14.750
A partir de hoje, e a ser devolvido dentro de um mês, atualize a tabela do livro para indicar que o livro está retirado

13
01:16.320 --> 01:18.200
e, finalmente, comprometer-se com a transação.

14
01:21.690 --> 01:28.830
Aqui vamos demonstrar a criação de um procedimento armazenado que criará uma transação; adicionar um empréstimo

15
01:28.830 --> 01:35.130
para a tabela de empréstimo do livro e, em seguida, atualizar a tabela do livro para indicar que o livro é retirado e, finalmente,

16
01:35.130 --> 01:37.180
cometer a transação.

17
01:37.320 --> 01:44.480
Então vamos dar uma olhada na tabela de empréstimo do livro

18
01:44.820 --> 01:51.790
Então, para realizar esta operação podemos calcular a data retirada porque será a data atual.

19
01:51.870 --> 01:58.230
Podemos calcular a data de vencimento porque será 30 dias a partir de hoje ou um mês a partir de hoje.

20
01:58.230 --> 02:02.160
A iD estudantil e a id do livro precisarão ser repassadas ao procedimento armazenado.

21
02:02.160 --> 02:03.770
Então vamos fazer isso.

22
02:03.790 --> 02:08.490
Criar procedimento RetirarLivro

23
02:14.440 --> 02:25.890
Você vai precisar da ID estudantil que é do tipo int, ID do livro, que também é do tipo int

24
02:26.280 --> 02:31.720
Agora queremos criar a transação que é; Iniciar transação

25
02:35.960 --> 02:41.290
inserir em bookloan (studentID, bookId, dateWithd, dateDue)

26
02:41.910 --> 02:47.640
inserir em bookloan (studentID, bookId, dateWithd, dateDue)

27
02:48.500 --> 02:58.320
Os valores para isso serão a ID Estudantil aprovada; o iD do livro como passou em;

28
02:58.450 --> 03:06.050
A data retirada é a data atual; e a data prevista é de um mês a partir de hoje; que você escreve como;

29
03:06.050 --> 03:15.710
dateadd (mês,1,getdate())

30
03:15.800 --> 03:21.410
Também queremos atualizar a tabela de livros; então vamos olhar para a mesa de livros.

31
03:23.030 --> 03:31.450
Ok, nós queremos atualizar o ID da estante e defini-lo para 6 para indicar que ele está retirado

32
03:31.520 --> 03:39.520
livros de atualização definir livroShelfId=6 onde id=@bookid

33
03:40.810 --> 03:43.700
E, finalmente, cometer transação

34
03:49.890 --> 03:50.230
OKEY.

35
03:50.270 --> 03:59.800
Então, o que nós realmente fizemos aqui o seu nós embrulhamos estas poucas linhas de SQL em uma linha de SQL

36
04:00.020 --> 04:01.190
que vou demonstrar agora.

37
04:02.000 --> 04:06.760
Então vamos dar uma olhada em nossa mesa de livros por um momento.

38
04:06.800 --> 04:12.990
Digamos que você queira retirar o livro 3.

39
04:13.540 --> 04:14.860
Vamos olhar para a mesa de nossos alunos

40
04:20.590 --> 04:22.240
e tomaremos.

41
04:22.280 --> 04:24.260
PETER MURPHY como o estudante

42
04:29.250 --> 04:39.660
assim; para executar um procedimento armazenado, você escreve o nome do procedimento armazenado; 

43
04:39.670 --> 04:46.260
primeiro parâmetro é a ID estudantil que é 3; segundo parâmetro é BookID que também é 3.

44
04:46.330 --> 04:53.230
Então eu agora executar esta declaração; Três linhas foram afetadas.

45
04:53.330 --> 04:56.000
A primeira é inserir no empréstimo do livro.

46
04:56.060 --> 05:02.770
O segundo são os livros de atualização e o terceiro seria, na verdade, o gatilho do exercício anterior.

47
05:02.900 --> 05:08.220
Então vamos dar uma olhada e ver o que aconteceu; selecionar * de bookloan

48
05:11.880 --> 05:18.380
agora podemos ver este terceiro empréstimo de livro, nesse caso, a ID estudantil tirou o livro ID 3

49
05:19.680 --> 05:20.710
Vamos olhar nossos livros

50
05:26.300 --> 05:37.440
e também podemos ver que o livro ID 3 está agora definido como ID 6 da estante; por isso, portanto, temos embrulhado estes

51
05:37.530 --> 05:43.020
quatro linhas de SQL nesta simples pequena declaração.

52
05:44.240 --> 05:47.800
E, na verdade, isso ajuda o desempenho também; 

53
05:47.810 --> 05:50.340
Então, não só torna seu SQL mais conciso.

54
05:50.340 --> 05:51.290
Ele torna mais rápido

55
05:54.100 --> 05:59.580
Funções definidas pelo usuário ou UDF; 

56
05:59.630 --> 06:06.110
As funções definidas pelo usuário também envolvem SQL mais complexo de forma reutilizável; mas são projetados para ser chamado de dentro de um

57
06:06.190 --> 06:09.290
Declaração SQL em vez de por conta própria como um procedimento armazenado.

58
06:10.300 --> 06:17.010
Para criar uma função definida pelo usuário, use o formato; criar função "nome de função", @variable

59
06:20.080 --> 06:23.680
retorna int como, e, em seguida, sua declaração SQL.

60
06:26.210 --> 06:32.590
Demonstração de vídeo; Aqui vamos criar uma função definida pelo usuário para calcular a data de retorno de um

61
06:32.590 --> 06:40.210
livro que satisfaz o seguinte; 30 dias a partir de hoje; e, em seguida, alterar o procedimento armazenado para usar este

62
06:40.420 --> 06:45.070
UDF para cálculo da data de retorno

63
06:45.100 --> 06:50.260
Aqui vamos demonstrar a criação de uma função definida pelo usuário que irá calcular a data de retorno para um

64
06:50.260 --> 06:52.820
livro que é 30 dias a partir de hoje.

65
06:53.890 --> 07:01.510
Então, para isso, digitamos: criar função CalculateDueDate

66
07:04.570 --> 07:08.830
Aqui passaria qualquer parâmetro, neste caso.

67
07:08.830 --> 07:09.630
Nós não temos nenhum.

68
07:09.640 --> 07:13.990
Então são parênteses vazios, retorna.

69
07:14.040 --> 07:15.700
Nome do tipo de dados.

70
07:15.720 --> 07:21.630
Do valor de retorno que, neste caso, a data de data, como início.

71
07:22.860 --> 07:33.650
Data de retornoadd (dia, 30, getdate())

72
07:35.510 --> 07:42.330
Para demonstrar essa função sendo chamada; Escreva uma declaração selecionada.

73
07:44.440 --> 07:54.940
A fim de chamar uma função definida pelo usuário prefixá-lo com dbo, que significa um banco de dados todo proprietário e

74
07:54.940 --> 08:03.790
chamamos a função assim; executar; e isso retorna a data daqui a 30 dias.

75
08:03.790 --> 08:12.250
A data será diferente no seu exemplo; então o próximo passo neste procedimento é atualizar o armazenado

76
08:12.250 --> 08:19.090
procedimento com esta nova função definida pelo usuário em vez de usar dataAdd diretamente.

77
08:19.960 --> 08:29.460
Então, se voltarmos ao procedimento armazenado que criamos no vídeo anterior; vamos substituir

78
08:30.300 --> 08:42.300
dateAdd e com a função definida pelo usuário que é CalculateDueDate e em vez de criar para usar o

79
08:42.300 --> 08:45.010
palavra alterar.

80
08:45.030 --> 08:46.680
Agora execute esta atualização

81
08:52.550 --> 09:01.610
nosso procedimento armazenado agora usa uma função definida pelo usuário para extrair ainda mais alguns SQL mais complexos

82
09:04.450 --> 09:10.840
pontos de vista; as visualizações são uma maneira de fazer com que declarações selecionadas complexas apareçam como uma tabela.

83
09:10.840 --> 09:16.940
Desta forma, uma lógica mais complexa pode ser abstraída e o usuário pode escrever instruções selecionadas contra

84
09:16.940 --> 09:24.910
a visão como se fosse uma mesa; visualizações criadas usando o formato criar visualização seguido pelo seu nome de exibição

85
09:25.360 --> 09:29.690
como selecionar; e sua declaração selecionada

86
09:32.400 --> 09:34.470
demonstração de vídeo.

87
09:34.500 --> 09:42.030
Neste vídeo você criará uma visão de empréstimos pendentes que incluirão: o nome completo do aluno

88
09:42.450 --> 09:50.240
o nome do livro; o número de dias em atraso ou permanência no empréstimo; e ordenado pelo nome do aluno.

89
09:50.410 --> 09:57.700
Em seguida, demonstraremos como escrever instruções selecionadas na exibição alterando a ordem dos resultados.

90
09:58.190 --> 10:05.160
Agora vamos demonstrar a criação de uma visão que pode envolver uma declaração de seleção complexa em uma mais simples

91
10:06.660 --> 10:08.590
então ele vai se comportar um pouco como uma mesa.

92
10:08.670 --> 10:13.230
Então vamos ver neste vídeo vamos criar uma visão de empréstimos de livros pendentes que incluirá

93
10:13.230 --> 10:16.140
nome completo do aluno; o nome do livro; e o número de dias atrasados.

94
10:16.320 --> 10:22.230
Vamos começar com uma declaração selecionada; selecionar * de bookloans

95
10:22.830 --> 10:28.010
Você precisará se juntar a isso na mesa dos alunos e na mesa de livros.

96
10:28.040 --> 10:36.860
participar do aluno em s.id = bl.studentID

97
10:37.210 --> 10:40.490
juntar livros b em b.id = bl.bookId

98
10:40.760 --> 10:41.480
Legal.

99
10:42.810 --> 10:45.340
Portanto, este deve ser todos os dados que precisamos.

100
10:45.520 --> 10:48.270
Agora precisamos começar com o nome completo do aluno.

101
10:48.280 --> 10:57.540
s.FirstName + ' + s.Surname como FullName

102
10:58.640 --> 11:02.200
Então agora temos o nome completo do aluno.

103
11:02.240 --> 11:07.230
Agora também queremos o nome do livro; que já está aqui; e o número de dias atrasados.

104
11:07.290 --> 11:08.450
Então nós usamos um datediff

105
11:11.020 --> 11:11.410
datado(dia, datado, data())

106
11:14.230 --> 11:17.160
datado(dia, datado, data())

107
11:17.830 --> 11:23.700
Essa é a diferença de dias entre a data vencida na data atual, e vamos chamá-la de atrasada.

108
11:26.600 --> 11:36.550
A coluna vencida é negativa porque a data a ser vencida é no futuro; então agora não precisamos de todas as colunas

109
11:36.570 --> 11:40.730
então basta ter o nome do livro aqui.

110
11:41.770 --> 11:43.710
Isso nos deu nossa declaração seleto.

111
11:43.750 --> 11:48.460
Agora podemos encerrar isso em uma vista; dizendo;

112
11:48.500 --> 11:58.070
criar exibição em atrasoEmpréstimos como 

113
11:58.300 --> 12:05.280
E agora, se quisermos executar essa declaração seleto novamente, poderíamos apenas fazer uma seleção * de empréstimos em atraso.

114
12:05.710 --> 12:11.380
Como se os empréstimos vencidos fossem uma mesa; e agora podemos encomendá-lo pelo nome completo

115
12:15.740 --> 12:19.160
que não vai afetar as coisas porque é tudo a mesma coisa.

116
12:19.160 --> 12:21.110
Poderíamos pedir por descendentes atrasados

117
12:26.500 --> 12:32.100
então vamos ver este indo para o topo;  lá vamos nós.

118
12:32.110 --> 12:36.900
Então, este empréstimo atrasado como aparecendo como uma mesa.

119
12:36.940 --> 12:39.920
Mas é realmente esta declaração seleto aqui.

120
12:40.090 --> 12:41.130
Isto é o que é uma vista.

121
12:43.350 --> 12:47.970
Tabelas temporárias; às vezes, ao trabalhar com consultas complexas

122
12:48.090 --> 12:54.690
Você pode querer armazenar resultados intermediários em armazenamento temporário, mas não precisa iniciá-los permanentemente.

123
12:54.690 --> 13:01.570
Você pode fazer isso criando tabelas temporárias com o prefixo hashtag; dados armazenados em tabelas temporárias

124
13:01.570 --> 13:06.390
serão descartados assim que a sessão for encerrada e não estiverem visíveis para outras sessões.

125
13:08.530 --> 13:17.890
Selecione em; se você precisar copiar a saída de uma declaração selecionada em uma nova tabela, você pode usar o

126
13:18.100 --> 13:26.450
selecionar em sintaxe; uma tabela será criada para você e esta tabela ainda não deve estar presente.

127
13:26.450 --> 13:31.760
Isso é frequentemente usado em conjunto com tabelas temporárias e tem o formulário selecionado em

128
13:34.630 --> 13:38.160
o nome temporário da tabela

129
13:42.500 --> 13:45.040
inserir em selecionar.

130
13:45.040 --> 13:51.550
Se você quiser copiar a saída de uma declaração selecionada em uma tabela existente, então você deve usar o

131
13:51.550 --> 13:55.220
inserir em sintaxe selecionada.

132
13:55.240 --> 13:59.720
A tabela não deve existir antes de executar a declaração.

133
13:59.740 --> 14:09.040
Isso é frequentemente usado em conjunto com tabelas temporárias e tem o formulário inserido em "nome de tabela" "nomes de coluna".

134
14:09.040 --> 14:12.880
Selecione nomes de colunas na tabela

135
14:17.260 --> 14:19.100
demonstração de vídeo.

136
14:19.750 --> 14:27.650
Aqui vamos criar uma tabela temporária que tem três colunas BookName, Author1 e Author2

137
14:28.150 --> 14:33.290
Usaremos select para criar a tabela para livros de autores únicos.

138
14:33.430 --> 14:39.240
Usaremos inserir para anexar a esta tabela para livros de dois autores.

139
14:39.330 --> 14:43.040
Demonstraremos como uma tabela temporária não é visível para outros usuários do banco de dados.

140
14:45.080 --> 14:51.080
Ok, então aqui vamos demonstrar tabelas temporárias onde vamos criar uma tabela temporária

141
14:51.080 --> 14:56.630
usando o comando Select em comando e, em seguida, vamos anexar à tabela temporária usando a inserção

142
14:56.720 --> 14:57.740
em comando.

143
14:58.520 --> 15:07.810
Então o que queremos é três colunas uma ou o nome do livro; um com autor um; um autor dois; Então o que precisamos

144
15:07.810 --> 15:14.150
a fazer é primeiro encontrar uma declaração seleto que nos dará apenas livros de autores únicos.

145
15:14.170 --> 15:20.570
Então vamos começar com a tabela de autor de livros; selecionar * do livroAutor

146
15:20.770 --> 15:29.020
Agora o que vamos fazer é agrupar em BookID e usar uma cláusula para afirmar que só queremos

147
15:31.040 --> 15:33.660
apenas um desses.

148
15:33.820 --> 15:34.710
Então nós vamos.

149
15:36.190 --> 15:36.840
BookID

150
15:39.370 --> 15:41.640
E grupo por bookId

151
15:42.780 --> 15:44.230
OKEY.

152
15:44.370 --> 15:47.310
Ter contagem(*) é igual a 1.

153
15:47.710 --> 15:51.400
Então estamos procurando aqui livros onde só há um autor.

154
15:51.430 --> 15:59.430
Então, eu estou esperando para ver o livro 1 e 2; mas não três. 1 e 2 não 3.

155
15:59.880 --> 16:00.970
Vamos dar uma olhada.

156
16:01.110 --> 16:06.060
Se quisermos dizer livros com dois autores seria assim.

157
16:06.180 --> 16:08.210
Então nós temos id livro 3

158
16:08.340 --> 16:10.680
Então agora vamos nos juntar a isso na mesa de livros

159
16:14.270 --> 16:24.850
juntar livros b em b.id = ba.bookID

160
16:24.860 --> 16:30.480
Vamos fazer o mesmo para a consulta de autor duplo

161
16:31.260 --> 16:33.200
Agora vamos precisar do nome do livro aqui.

162
16:33.280 --> 16:37.300
Então vamos dizer b.Bookname, e 

163
16:37.360 --> 16:40.040
o grupo por vai estar no nome do livro

164
16:40.090 --> 16:41.770
Então vamos fazer isso aqui e aqui.

165
16:42.250 --> 16:49.810
Portanto, estes devem ser livros com um autor e estes devem ser livros com dois autores.

166
16:50.760 --> 16:54.310
Então, a próxima coisa que precisamos é o nome do autor real.

167
16:54.540 --> 16:57.010
Então vamos nos juntar ao autor.

168
16:57.060 --> 17:01.650
participar autor de um sobre a.id = ba.authorid

169
17:02.040 --> 17:05.290
participar autor de um sobre a.id = ba.authorid

170
17:05.460 --> 17:06.530
O mesmo aqui.

171
17:12.660 --> 17:13.680
E neste Select...

172
17:14.190 --> 17:15.750
O que precisamos é de uma consulta agregada.

173
17:15.750 --> 17:20.790
Então, neste caso vai usar o mínimo, mas para ser honesto, pode ser qualquer coisa aqui, porque há apenas

174
17:20.790 --> 17:28.870
vai ser apenas um assim; AutorName como autor1

175
17:29.520 --> 17:33.360
Aqui vão ter tanto Min e Max

176
17:36.900 --> 17:44.620
então vamos dizer Min para autor1 no máximo para autor2.

177
17:44.790 --> 17:46.490
Então vamos ver como isso funciona.

178
17:47.550 --> 17:54.240
Assim, o autor do livro1 J.K. Rowling; autor do nome do livro2

179
17:54.330 --> 17:58.680
Então lá vamos nós; agora, mas eu não tenho porque eu quero combinar essas duas coisas.

180
17:58.740 --> 18:03.300
Eu quero ter uma coluna autor2 sobre isso; mas tem que ser NULO.

181
18:03.750 --> 18:13.200
Então o que eu preciso fazer é lançar NULL para o mesmo tipo de dados que o nome do autor que é varchar(max)

182
18:13.260 --> 18:16.370
elenco (NULL como varchar(max))

183
18:16.590 --> 18:18.920
elenco (NULL como varchar(max))

184
18:19.020 --> 18:26.140
como Autor2

185
18:26.270 --> 18:32.920
Então, se executarmos isso, temos uma segunda coluna neste autor2 que apenas diz NULL.

186
18:32.970 --> 18:39.690
Agora aqui é onde vamos tentar combinar as duas coisas, então eu vou mudar para selecionar em um

187
18:40.020 --> 18:44.530
selecionar em declaração; e vamos chamá-lo de #TempBooks.

188
18:44.610 --> 18:50.730
Observe que o símbolo hash ou o símbolo hashtag antes do nome da tabela.

189
18:50.730 --> 18:55.890
Isso indica que é uma tabela temporária e não será visível para qualquer outro usuário deste banco de dados

190
18:55.920 --> 18:56.940
fora da sessão.

191
18:56.940 --> 19:04.690
Então é útil para uma espécie de memória de trabalho.

192
19:05.730 --> 19:06.180
Desculpa

193
19:13.830 --> 19:14.300
Okey.

194
19:14.520 --> 19:16.050
Desculpe por criar isso de novo.

195
19:17.270 --> 19:27.680
Ok, então agora temos duas linhas na tabela #TempBooks; para que possamos olhar para a tabela #TempBooks; selecionar * de 
#TempBooks

196
19:29.710 --> 19:33.520
As duas filas para livros de autor único.

197
19:33.570 --> 19:42.720
Agora vamos inserir em; por isso, insira em #TempBooks seguido da instrução selecionada; que agora podemos executar

198
19:43.190 --> 19:46.890
acrescentou uma linha extra; executar selecionar lá;

199
19:46.890 --> 19:50.370
E nós temos os três livros.

200
19:50.560 --> 19:56.370
Com Autor1, autor2. Agora, para demonstrar que isso só é visível para esta sessão.

201
19:56.370 --> 20:00.990
Podemos criar uma nova consulta aqui; e tentar ver isso.

202
20:01.020 --> 20:08.070
Então isso está simulando outro usuário; e esse usuário não pode ver a tabela #TempBooks.

203
20:08.070 --> 20:15.710
Portanto, é útil para a memória de trabalho; algo que você só quer trabalhar; e depois jogar fora.

204
20:16.530 --> 20:18.180
Então espero que isso fizesse sentido

205
20:21.040 --> 20:29.360
sp_help e sp_helptext;  sp_help e sp_helptext são sistema

206
20:29.360 --> 20:32.360
forneceu declarações SQL.

207
20:32.360 --> 20:38.160
Estes podem ser usados para visualizar o conteúdo ou esquema de objetos de banco de dados como tabelas; procedimentos armazenados; Modos de exibição

208
20:38.180 --> 20:43.990
gatilhos; funções definidas pelo usuário; etc. que poderiam ser usados da seguinte forma; 

209
20:43.980 --> 20:48.690
sp_help 'mesa'

210
20:52.290 --> 20:59.220
demonstração de vídeo. Aqui vamos demonstrar como usar a interface do usuário e o sp_help

211
21:00.070 --> 21:09.810
ou sp_helptext comandos para visualizar: tabelas; pontos de vista; procedimentos armazenados; gatilhos; e funções definidas pelo usuário.

212
21:09.810 --> 21:16.730
Aqui vamos demonstrar a interface do usuário usando o sp_help em comandos sp_helptext

213
21:16.740 --> 21:21.720
para ver; tabelas; pontos de vista; procedimentos armazenados; gatilhos; e funções definidas pelo usuário.

214
21:21.720 --> 21:24.290
Então vamos começar com as mesas.

215
21:24.870 --> 21:29.110
Basta navegar até seu banco de dados.

216
21:29.130 --> 21:30.120
Expanda as mesas.

217
21:30.130 --> 21:31.920
Vamos dar uma olhada na tabela do autor.

218
21:31.950 --> 21:41.140
Você pode expandir a tabela, para ver colunas; chaves e assim por diante.

219
21:41.250 --> 21:50.710
Ou se você quiser usar a linha de comando que você pode usar: sp_help autor

220
21:50.750 --> 21:59.210
Isso lhe dará algumas informações sobre, por exemplo, quais colunas estão na tabela

221
21:59.210 --> 22:00.120
Para fazer o mesmo com uma visão:

222
22:00.350 --> 22:05.400
Podemos expandir as visualizações, por exemplo, empréstimos vencidos.

223
22:05.440 --> 22:14.810
Há as colunas da nossa visão de empréstimos vencidos; e se você quiser ver o conteúdo deste que você pode direito

224
22:14.810 --> 22:24.460
clique e vá; exibição de script como; criar para novo editor de consulta e você pode ver a declaração selecionada usada para

225
22:24.460 --> 22:28.580
criar esta visualização ou se você quiser, você pode ir.

226
22:28.580 --> 22:34.420
empréstimos sp_helptext vencidos

227
22:37.720 --> 22:39.920
Executar

228
22:40.150 --> 22:41.650
Isso está em uma vista de grade.

229
22:41.650 --> 22:46.280
Você pode realmente ver isso como texto pressionando o controle e T

230
22:49.010 --> 22:59.750
Isso pode tornar um pouco mais útil, voltar para a exibição de grade anterior controle de imprensa D ; Executar.

231
23:00.440 --> 23:04.980
Então é realmente preferência pessoal alguns tipos de dados é mais fácil de ver na grade e às vezes

232
23:04.980 --> 23:07.750
é mais fácil de ver como texto.

233
23:08.190 --> 23:19.450
Então vamos ver os procedimentos da loja; ampliar a programabilidade; procedimentos armazenados; Há o "Book".

234
23:19.970 --> 23:30.000
Um atalho se você não quiser redigitá-lo;  você pode realmente arrastá-lo de lado, e usásp_helptext

235
23:33.260 --> 23:41.120
para ver o livro de retirada; Os suportes quadrados são bastante irrelevante, neste caso, ele realmente apenas 

236
23:41.190 --> 23:48.770
Se você tem um objeto que tem como um espaço no meio dele, você pode usar suportes quadrados para fechá-lo

237
23:49.150 --> 23:54.920
Portanto, há o nosso procedimento de retiradabook armazenado.

238
23:55.080 --> 24:00.300
Gatilhos; Mais uma vez você navega até a mesa expande os gatilhos.

239
24:00.390 --> 24:02.450
Aí estão nossos gatilhos.

240
24:02.690 --> 24:05.120
Podemos dar uma olhada neles usando sp_helptext

241
24:10.230 --> 24:17.230
Isso nos dá uma idéia do que está nesse gatilho em particular; e, finalmente, funções definidas pelo usuário que

242
24:17.230 --> 24:23.840
estão mais uma vez sob programabilidade;  Funções.

243
24:23.840 --> 24:29.380
E era uma função escalar valorizado; usamos sp_helptext

244
24:33.490 --> 24:36.980
Para visualizar essa função definida pelo usuário em particular.

245
24:37.870 --> 24:45.180
Então essa é uma visão rápida de como você pode ver vários objetos de esquema do banco de dados.

246
24:46.190 --> 24:49.880
Você vai pegar o jeito disso muito rapidamente; 

247
24:51.790 --> 24:57.790
E acabou para você. Para este exercício eu gostaria que você escrevesse um procedimento armazenado para lidar com um livro sendo devolvido.

248
24:57.790 --> 24:59.590
Ele deve executar o seguinte.

249
24:59.890 --> 25:06.340
Criar uma transação; atualizar a coluna de retorno da data da tabela de empréstimos do livro com a data atual.

250
25:07.890 --> 25:15.720
Adicionar atualizar a tabela do livro com o ID da estante fornecido e, finalmente, comprometer-se com a transação

251
25:15.750 --> 25:17.880
Então pare este vídeo agora e dê uma chance.

252
25:18.420 --> 25:27.430
Uma vez que você tentou; retomar o vídeo e ver como você entrou. 

253
25:27.440 --> 25:29.060
Espero que tenha dado uma chance a este exercício antes de procurar a solução.

254
25:29.160 --> 25:30.800
Mas esta é a solução.

255
25:30.860 --> 25:35.660
Então queremos criar um procedimento armazenado que faça o oposto de um livro de retirada.

256
25:35.810 --> 25:39.420
Ele vai devolver um livro para a biblioteca.

257
25:39.830 --> 25:41.580
Então vamos dar uma olhada em nossa tabela bookLoans

258
25:45.800 --> 25:59.790
O que queremos fazer é atualizar a tabela de bookloan.

259
26:00.450 --> 26:00.800
atualizar bookloan definir DataRetornada = getDate() onde BookID=@BookId

260
26:03.540 --> 26:05.890
atualizar bookloan definir DataRetornada = getDate() onde BookID=@BookId

261
26:09.210 --> 26:17.650
e então queremos atualizar a tabela de livros, então olhe para a tabela de livros.

262
26:19.220 --> 26:25.790
livros de atualização definir BookShelfId = @BookShelfID onde id=@bookID

263
26:28.070 --> 26:28.960
livros de atualização definir BookShelfId = @BookShelfID onde id=@bookID

264
26:33.380 --> 26:38.540
livros de atualização definir BookShelfId = @BookShelfID onde id=@bookID

265
26:41.800 --> 26:47.430
então isso precisará ser embrulhado em uma transação, por isso vamos apenas digitar .

266
26:48.310 --> 26:48.900
Iniciar transação

267
26:53.120 --> 26:53.990
cometer transação

268
26:58.010 --> 27:06.630
e, em seguida, a coisa toda está dentro do procedimento armazenado, então crie procedimento returnBook.

269
27:07.320 --> 27:09.330
Serão necessários dois parâmetros.

270
27:09.410 --> 27:16.030
O @bookID e o @bookshelfID

271
27:16.280 --> 27:17.350
O que também é um int

272
27:22.070 --> 27:23.860
Como

273
27:23.930 --> 27:30.090
Então este é o procedimento da loja escrito; Executar

274
27:33.840 --> 27:38.040
Isso deve ser uma id lá, não bookID

275
27:38.350 --> 27:45.410
Ok, então vamos colocar isso à prova; E vamos dar uma olhada em um dos empréstimos do livro

276
27:45.450 --> 27:48.180
selecionar * de bookloan

277
27:50.210 --> 27:58.160
E devolveremos o livro ID 1 para a estante 1;  

278
28:04.250 --> 28:06.470
Livro de devolução 1,1

279
28:06.480 --> 28:08.700
E então este é este livro aqui.

280
28:09.530 --> 28:13.130
Então devolva o livro.

281
28:13.430 --> 28:17.140
Dar uma olhada na mesa de bookloan; a data de retorno agora está definida;

282
28:17.160 --> 28:19.670
Essa data será diferente para você.

283
28:20.020 --> 28:21.500
E também vamos dar uma olhada em nossa mesa de livros

284
28:26.890 --> 28:29.750
e você pode ver um livro ID 1 tem agora uma id estante de 1

285
28:29.790 --> 28:31.460
Isso está de volta na prateleira.

286
28:32.160 --> 28:32.480
OKEY.

287
28:32.570 --> 28:34.430
Espero que tenha essa solução.

288
28:34.880 --> 28:36.870
Boa sorte com o próximo vídeo.
